/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   /home/nimunozb/Documentos/embebidos/repositorios/evse-embebidos-software/i5ether/test/telnet/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   $ZEPHYR_BASE/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /chosen
 *   2   /memory@40000000
 *   3   /cpus
 *   4   /cpus/cpu@0
 *   5   /soc
 *   6   /soc/clock-outputs
 *   7   /soc/clock-outputs/clock-controller@0
 *   8   /soc/clock-outputs/clock-controller@1
 *   9   /soc/clock@e0004800
 *   10  /soc/dna@e0003800
 *   11  /soc/interrupt-controller@bc0
 *   12  /soc/ethernet@e0009800
 *   13  /soc/gpio@e0005800
 *   14  /soc/gpio@e0006000
 *   15  /soc/i2c@e0005000
 *   16  /soc/i2s_rx@e000a800
 *   17  /soc/i2s_tx@e000b000
 *   18  /soc/prbs@e0006800
 *   19  /soc/pwm@e0007000
 *   20  /soc/serial@e0001800
 *   21  /soc/spi@e0002000
 *   22  /soc/timer@e0002800
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/* Used to remove brackets from around a single argument */
#define DT_DEBRACKET_INTERNAL(...) __VA_ARGS__

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"

/* Helper macros for child nodes of this node. */
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_cpus) fn(DT_N_S_soc) fn(DT_N_S_memory_40000000)
#define DT_N_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_40000000)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_memory_40000000, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_40000000, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_cpus) fn(DT_N_S_soc) fn(DT_N_S_memory_40000000)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_chosen) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_40000000)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_memory_40000000, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_chosen, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_cpus, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_memory_40000000, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /chosen */ \
	2, /* /memory@40000000 */ \
	3, /* /cpus */ \
	5, /* /soc */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_litex_vexriscv DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_litex_vexriscv 1
#define DT_N_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_COMPAT_MODEL_IDX_0 "vexriscv"
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"litex,vexriscv"}
#define DT_N_P_compatible_IDX_0 "litex,vexriscv"
#define DT_N_P_compatible_IDX_0_STRING_UNQUOTED litex,vexriscv
#define DT_N_P_compatible_IDX_0_STRING_TOKEN litex_vexriscv
#define DT_N_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_VEXRISCV
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N, compatible, 0)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N, compatible, 0, __VA_ARGS__)
#define DT_N_P_compatible_LEN 1
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /memory@40000000
 *
 * Node identifier: DT_N_S_memory_40000000
 */

/* Node's full path: */
#define DT_N_S_memory_40000000_PATH "/memory@40000000"

/* Node's name with unit-address: */
#define DT_N_S_memory_40000000_FULL_NAME "memory@40000000"

/* Node parent (/) identifier: */
#define DT_N_S_memory_40000000_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_memory_40000000_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_memory_40000000_FOREACH_CHILD(fn) 
#define DT_N_S_memory_40000000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_memory_40000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_40000000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_memory_40000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_40000000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_memory_40000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_memory_40000000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_memory_40000000_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_40000000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_40000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_40000000_EXISTS 1
#define DT_N_NODELABEL_ram0 DT_N_S_memory_40000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_40000000_REG_NUM 1
#define DT_N_S_memory_40000000_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_40000000_REG_IDX_0_VAL_ADDRESS 1073741824 /* 0x40000000 */
#define DT_N_S_memory_40000000_REG_IDX_0_VAL_SIZE 8388608 /* 0x800000 */
#define DT_N_S_memory_40000000_RANGES_NUM 0
#define DT_N_S_memory_40000000_FOREACH_RANGE(fn) 
#define DT_N_S_memory_40000000_IRQ_NUM 0
#define DT_N_S_memory_40000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_40000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_40000000_P_reg {1073741824 /* 0x40000000 */, 8388608 /* 0x800000 */}
#define DT_N_S_memory_40000000_P_reg_IDX_0 1073741824
#define DT_N_S_memory_40000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_40000000_P_reg_IDX_1 8388608
#define DT_N_S_memory_40000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_40000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_40000000, reg, 0) \
	fn(DT_N_S_memory_40000000, reg, 1)
#define DT_N_S_memory_40000000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_memory_40000000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_memory_40000000, reg, 1)
#define DT_N_S_memory_40000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_40000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_memory_40000000, reg, 1, __VA_ARGS__)
#define DT_N_S_memory_40000000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_memory_40000000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_memory_40000000, reg, 1, __VA_ARGS__)
#define DT_N_S_memory_40000000_P_reg_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	4, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	3, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_riscv DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_riscv 1
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_compatible {"riscv"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "riscv"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UNQUOTED riscv
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_TOKEN riscv
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_STRING_UPPER_TOKEN RISCV
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_status "okay"
#define DT_N_S_cpus_S_cpu_0_P_status_STRING_UNQUOTED okay
#define DT_N_S_cpus_S_cpu_0_P_status_STRING_TOKEN okay
#define DT_N_S_cpus_S_cpu_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_IDX 1
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_TOKEN okay
#define DT_N_S_cpus_S_cpu_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, status, 0) \
	fn(DT_N_S_cpus_S_cpu_0, status, 1) \
	fn(DT_N_S_cpus_S_cpu_0, status, 2) \
	fn(DT_N_S_cpus_S_cpu_0, status, 3)
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_cpus_S_cpu_0, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 3)
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_cpus_S_cpu_0, status, 3, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_cpus_S_cpu_0, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_cpus_S_cpu_0, status, 3, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_status_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_interrupt_controller_bc0) fn(DT_N_S_soc_S_serial_e0001800) fn(DT_N_S_soc_S_spi_e0002000) fn(DT_N_S_soc_S_timer_e0002800) fn(DT_N_S_soc_S_ethernet_e0009800) fn(DT_N_S_soc_S_dna_e0003800) fn(DT_N_S_soc_S_i2c_e0005000) fn(DT_N_S_soc_S_gpio_e0005800) fn(DT_N_S_soc_S_gpio_e0006000) fn(DT_N_S_soc_S_prbs_e0006800) fn(DT_N_S_soc_S_pwm_e0007000) fn(DT_N_S_soc_S_i2s_rx_e000a800) fn(DT_N_S_soc_S_i2s_tx_e000b000) fn(DT_N_S_soc_S_clock_outputs) fn(DT_N_S_soc_S_clock_e0004800)
#define DT_N_S_soc_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_bc0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_serial_e0001800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_e0002000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e0002800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ethernet_e0009800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_dna_e0003800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_e0005000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_e0005800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_e0006000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_prbs_e0006800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pwm_e0007000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2s_rx_e000a800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2s_tx_e000b000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_clock_outputs) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_clock_e0004800)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_bc0, __VA_ARGS__) fn(DT_N_S_soc_S_serial_e0001800, __VA_ARGS__) fn(DT_N_S_soc_S_spi_e0002000, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e0002800, __VA_ARGS__) fn(DT_N_S_soc_S_ethernet_e0009800, __VA_ARGS__) fn(DT_N_S_soc_S_dna_e0003800, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_e0005000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_e0005800, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_e0006000, __VA_ARGS__) fn(DT_N_S_soc_S_prbs_e0006800, __VA_ARGS__) fn(DT_N_S_soc_S_pwm_e0007000, __VA_ARGS__) fn(DT_N_S_soc_S_i2s_rx_e000a800, __VA_ARGS__) fn(DT_N_S_soc_S_i2s_tx_e000b000, __VA_ARGS__) fn(DT_N_S_soc_S_clock_outputs, __VA_ARGS__) fn(DT_N_S_soc_S_clock_e0004800, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_bc0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_serial_e0001800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_spi_e0002000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e0002800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ethernet_e0009800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_dna_e0003800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_e0005000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_e0005800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_e0006000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_prbs_e0006800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pwm_e0007000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2s_rx_e000a800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2s_tx_e000b000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_clock_outputs, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_clock_e0004800, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_interrupt_controller_bc0) fn(DT_N_S_soc_S_serial_e0001800) fn(DT_N_S_soc_S_timer_e0002800) fn(DT_N_S_soc_S_ethernet_e0009800) fn(DT_N_S_soc_S_i2c_e0005000) fn(DT_N_S_soc_S_gpio_e0005800) fn(DT_N_S_soc_S_gpio_e0006000) fn(DT_N_S_soc_S_prbs_e0006800) fn(DT_N_S_soc_S_pwm_e0007000) fn(DT_N_S_soc_S_clock_outputs)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_bc0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_serial_e0001800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e0002800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ethernet_e0009800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_e0005000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_e0005800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_e0006000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_prbs_e0006800) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pwm_e0007000) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_clock_outputs)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_bc0, __VA_ARGS__) fn(DT_N_S_soc_S_serial_e0001800, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e0002800, __VA_ARGS__) fn(DT_N_S_soc_S_ethernet_e0009800, __VA_ARGS__) fn(DT_N_S_soc_S_i2c_e0005000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_e0005800, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_e0006000, __VA_ARGS__) fn(DT_N_S_soc_S_prbs_e0006800, __VA_ARGS__) fn(DT_N_S_soc_S_pwm_e0007000, __VA_ARGS__) fn(DT_N_S_soc_S_clock_outputs, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_bc0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_serial_e0001800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_timer_e0002800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_ethernet_e0009800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_i2c_e0005000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_e0005800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_gpio_e0006000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_prbs_e0006800, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_pwm_e0007000, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_clock_outputs, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	6, /* /soc/clock-outputs */ \
	9, /* /soc/clock@e0004800 */ \
	10, /* /soc/dna@e0003800 */ \
	11, /* /soc/interrupt-controller@bc0 */ \
	12, /* /soc/ethernet@e0009800 */ \
	13, /* /soc/gpio@e0005800 */ \
	14, /* /soc/gpio@e0006000 */ \
	15, /* /soc/i2c@e0005000 */ \
	16, /* /soc/i2s_rx@e000a800 */ \
	17, /* /soc/i2s_tx@e000b000 */ \
	18, /* /soc/prbs@e0006800 */ \
	19, /* /soc/pwm@e0007000 */ \
	20, /* /soc/serial@e0001800 */ \
	21, /* /soc/spi@e0002000 */ \
	22, /* /soc/timer@e0002800 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_1_litex_vexriscv DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_litex_vexriscv 1
#define DT_N_S_soc_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_COMPAT_MODEL_IDX_0 "vexriscv"
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"litex,vexriscv"}
#define DT_N_S_soc_P_compatible_IDX_0 "litex,vexriscv"
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UNQUOTED litex,vexriscv
#define DT_N_S_soc_P_compatible_IDX_0_STRING_TOKEN litex_vexriscv
#define DT_N_S_soc_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_VEXRISCV
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/clock-outputs
 *
 * Node identifier: DT_N_S_soc_S_clock_outputs
 */

/* Node's full path: */
#define DT_N_S_soc_S_clock_outputs_PATH "/soc/clock-outputs"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_clock_outputs_FULL_NAME "clock-outputs"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_clock_outputs_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_clock_outputs_CHILD_IDX 13

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_clock_outputs_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1)
#define DT_N_S_soc_S_clock_outputs_FOREACH_CHILD_SEP(fn, sep) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1)
#define DT_N_S_soc_S_clock_outputs_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, __VA_ARGS__) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1)
#define DT_N_S_soc_S_clock_outputs_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1)
#define DT_N_S_soc_S_clock_outputs_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, __VA_ARGS__) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, __VA_ARGS__)

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_clock_outputs_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_clock_outputs_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_clock_outputs_SUPPORTS_ORDS \
	7, /* /soc/clock-outputs/clock-controller@0 */ \
	8, /* /soc/clock-outputs/clock-controller@1 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_clock_outputs_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_clock_outputs_REG_NUM 0
#define DT_N_S_soc_S_clock_outputs_RANGES_NUM 0
#define DT_N_S_soc_S_clock_outputs_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_clock_outputs_IRQ_NUM 0
#define DT_N_S_soc_S_clock_outputs_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_clock_outputs_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /soc/clock-outputs/clock-controller@0
 *
 * Node identifier: DT_N_S_soc_S_clock_outputs_S_clock_controller_0
 *
 * Binding (compatible = litex,clkout):
 *   $ZEPHYR_BASE/dts/bindings/clock/litex,clkout.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_PATH "/soc/clock-outputs/clock-controller@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_FULL_NAME "clock-controller@0"

/* Node parent (/soc/clock-outputs) identifier: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_PARENT DT_N_S_soc_S_clock_outputs

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_REQUIRES_ORDS \
	6, /* /soc/clock-outputs */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_SUPPORTS_ORDS \
	9, /* /soc/clock@e0004800 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_EXISTS 1
#define DT_N_INST_0_litex_clkout DT_N_S_soc_S_clock_outputs_S_clock_controller_0
#define DT_N_NODELABEL_clk0      DT_N_S_soc_S_clock_outputs_S_clock_controller_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_REG_NUM 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_RANGES_NUM 0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_IRQ_NUM 0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_COMPAT_MATCHES_litex_clkout 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_COMPAT_MODEL_IDX_0 "clkout"
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_clock_output_names "CLK_0"
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_clock_output_names_STRING_UNQUOTED CLK_0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_clock_output_names_STRING_TOKEN CLK_0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_clock_output_names_STRING_UPPER_TOKEN CLK_0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_clock_output_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 0) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 1) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 2) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 3) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 4)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_clock_output_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 4)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_clock_output_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 4, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_clock_output_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, clock_output_names, 4, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_clock_output_names_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_litex_clock_frequency 11289600
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_litex_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_litex_clock_phase 0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_litex_clock_phase_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_litex_clock_duty_num 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_litex_clock_duty_num_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_litex_clock_duty_den 2
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_litex_clock_duty_den_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_litex_clock_margin 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_litex_clock_margin_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_litex_clock_margin_exp 2
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_litex_clock_margin_exp_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_status "okay"
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 0) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 1) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 2) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 3)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 3)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_status_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_compatible {"litex,clkout"}
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_compatible_IDX_0 "litex,clkout"
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_compatible_IDX_0_STRING_UNQUOTED litex,clkout
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_compatible_IDX_0_STRING_TOKEN litex_clkout
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_CLKOUT
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, compatible, 0)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, compatible, 0)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_compatible_LEN 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_reg {0 /* 0x0 */}
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, reg, 0)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, reg, 0)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, reg, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, reg, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_wakeup_source 0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/clock-outputs/clock-controller@1
 *
 * Node identifier: DT_N_S_soc_S_clock_outputs_S_clock_controller_1
 *
 * Binding (compatible = litex,clkout):
 *   $ZEPHYR_BASE/dts/bindings/clock/litex,clkout.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_PATH "/soc/clock-outputs/clock-controller@1"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_FULL_NAME "clock-controller@1"

/* Node parent (/soc/clock-outputs) identifier: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_PARENT DT_N_S_soc_S_clock_outputs

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_REQUIRES_ORDS \
	6, /* /soc/clock-outputs */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_SUPPORTS_ORDS \
	9, /* /soc/clock@e0004800 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_EXISTS 1
#define DT_N_INST_1_litex_clkout DT_N_S_soc_S_clock_outputs_S_clock_controller_1
#define DT_N_NODELABEL_clk1      DT_N_S_soc_S_clock_outputs_S_clock_controller_1

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_REG_NUM 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_REG_IDX_0_VAL_ADDRESS 1 /* 0x1 */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_RANGES_NUM 0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_IRQ_NUM 0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_COMPAT_MATCHES_litex_clkout 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_COMPAT_MODEL_IDX_0 "clkout"
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_clock_output_names "CLK_1"
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_clock_output_names_STRING_UNQUOTED CLK_1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_clock_output_names_STRING_TOKEN CLK_1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_clock_output_names_STRING_UPPER_TOKEN CLK_1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_clock_output_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 0) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 1) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 2) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 3) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 4)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_clock_output_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 4)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_clock_output_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 4, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_clock_output_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, clock_output_names, 4, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_clock_output_names_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_litex_clock_frequency 22579200
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_litex_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_litex_clock_phase 0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_litex_clock_phase_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_litex_clock_duty_num 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_litex_clock_duty_num_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_litex_clock_duty_den 2
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_litex_clock_duty_den_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_litex_clock_margin 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_litex_clock_margin_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_litex_clock_margin_exp 2
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_litex_clock_margin_exp_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_status "okay"
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 0) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 1) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 2) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 3)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 3)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_status_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_compatible {"litex,clkout"}
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_compatible_IDX_0 "litex,clkout"
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_compatible_IDX_0_STRING_UNQUOTED litex,clkout
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_compatible_IDX_0_STRING_TOKEN litex_clkout
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_CLKOUT
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, compatible, 0)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, compatible, 0)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_compatible_LEN 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_compatible_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_reg {1 /* 0x1 */}
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_reg_IDX_0 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, reg, 0)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, reg, 0)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, reg, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, reg, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_reg_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_wakeup_source 0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_clock_outputs_S_clock_controller_1_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/clock@e0004800
 *
 * Node identifier: DT_N_S_soc_S_clock_e0004800
 *
 * Binding (compatible = litex,clk):
 *   $ZEPHYR_BASE/dts/bindings/clock/litex,clk.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_clock_e0004800_PATH "/soc/clock@e0004800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_clock_e0004800_FULL_NAME "clock@e0004800"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_clock_e0004800_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_clock_e0004800_CHILD_IDX 14

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_clock_e0004800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_clock_e0004800_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_clock_e0004800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_clock_e0004800_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_clock_e0004800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_clock_e0004800_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_clock_e0004800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_clock_e0004800_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_clock_e0004800_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_clock_e0004800_REQUIRES_ORDS \
	5, /* /soc */ \
	7, /* /soc/clock-outputs/clock-controller@0 */ \
	8, /* /soc/clock-outputs/clock-controller@1 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_clock_e0004800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_clock_e0004800_EXISTS 1
#define DT_N_INST_0_litex_clk DT_N_S_soc_S_clock_e0004800
#define DT_N_NODELABEL_clock0 DT_N_S_soc_S_clock_e0004800

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_clock_e0004800_REG_NUM 8
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_0_VAL_ADDRESS 3758114816 /* 0xe0004800 */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_1_VAL_ADDRESS 3758114820 /* 0xe0004804 */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_1_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_2_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_2_VAL_ADDRESS 3758114824 /* 0xe0004808 */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_2_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_3_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_3_VAL_ADDRESS 3758114828 /* 0xe000480c */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_3_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_4_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_4_VAL_ADDRESS 3758114832 /* 0xe0004810 */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_4_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_5_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_5_VAL_ADDRESS 3758114836 /* 0xe0004814 */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_5_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_6_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_6_VAL_ADDRESS 3758114840 /* 0xe0004818 */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_6_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_7_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_7_VAL_ADDRESS 3758114844 /* 0xe000481c */
#define DT_N_S_soc_S_clock_e0004800_REG_IDX_7_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_reset_VAL_ADDRESS DT_N_S_soc_S_clock_e0004800_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_reset_VAL_SIZE DT_N_S_soc_S_clock_e0004800_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_locked_VAL_ADDRESS DT_N_S_soc_S_clock_e0004800_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_locked_VAL_SIZE DT_N_S_soc_S_clock_e0004800_REG_IDX_1_VAL_SIZE
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_read_VAL_ADDRESS DT_N_S_soc_S_clock_e0004800_REG_IDX_2_VAL_ADDRESS
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_read_VAL_SIZE DT_N_S_soc_S_clock_e0004800_REG_IDX_2_VAL_SIZE
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_write_VAL_ADDRESS DT_N_S_soc_S_clock_e0004800_REG_IDX_3_VAL_ADDRESS
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_write_VAL_SIZE DT_N_S_soc_S_clock_e0004800_REG_IDX_3_VAL_SIZE
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_drdy_VAL_ADDRESS DT_N_S_soc_S_clock_e0004800_REG_IDX_4_VAL_ADDRESS
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_drdy_VAL_SIZE DT_N_S_soc_S_clock_e0004800_REG_IDX_4_VAL_SIZE
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_adr_VAL_ADDRESS DT_N_S_soc_S_clock_e0004800_REG_IDX_5_VAL_ADDRESS
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_adr_VAL_SIZE DT_N_S_soc_S_clock_e0004800_REG_IDX_5_VAL_SIZE
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_dat_w_VAL_ADDRESS DT_N_S_soc_S_clock_e0004800_REG_IDX_6_VAL_ADDRESS
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_dat_w_VAL_SIZE DT_N_S_soc_S_clock_e0004800_REG_IDX_6_VAL_SIZE
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_dat_r_VAL_ADDRESS DT_N_S_soc_S_clock_e0004800_REG_IDX_7_VAL_ADDRESS
#define DT_N_S_soc_S_clock_e0004800_REG_NAME_drp_dat_r_VAL_SIZE DT_N_S_soc_S_clock_e0004800_REG_IDX_7_VAL_SIZE
#define DT_N_S_soc_S_clock_e0004800_RANGES_NUM 0
#define DT_N_S_soc_S_clock_e0004800_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_clock_e0004800_IRQ_NUM 0
#define DT_N_S_soc_S_clock_e0004800_COMPAT_MATCHES_litex_clk 1
#define DT_N_S_soc_S_clock_e0004800_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_clock_e0004800_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_COMPAT_MODEL_IDX_0 "clk"
#define DT_N_S_soc_S_clock_e0004800_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_clock_e0004800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_clock_e0004800_P_reg {3758114816 /* 0xe0004800 */, 4 /* 0x4 */, 3758114820 /* 0xe0004804 */, 4 /* 0x4 */, 3758114824 /* 0xe0004808 */, 4 /* 0x4 */, 3758114828 /* 0xe000480c */, 4 /* 0x4 */, 3758114832 /* 0xe0004810 */, 4 /* 0x4 */, 3758114836 /* 0xe0004814 */, 4 /* 0x4 */, 3758114840 /* 0xe0004818 */, 4 /* 0x4 */, 3758114844 /* 0xe000481c */, 4 /* 0x4 */}
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_0 3758114816
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_1 4
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_2 3758114820
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_3 4
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_4 3758114824
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_4_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_5 4
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_5_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_6 3758114828
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_6_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_7 4
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_7_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_8 3758114832
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_8_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_9 4
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_9_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_10 3758114836
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_10_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_11 4
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_11_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_12 3758114840
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_12_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_13 4
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_13_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_14 3758114844
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_14_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_15 4
#define DT_N_S_soc_S_clock_e0004800_P_reg_IDX_15_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_e0004800, reg, 0) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 1) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 2) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 3) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 4) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 5) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 6) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 7) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 8) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 9) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 10) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 11) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 12) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 13) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 14) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 15)
#define DT_N_S_soc_S_clock_e0004800_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_e0004800, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 9) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 10) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 11) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 12) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 13) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 14) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 15)
#define DT_N_S_soc_S_clock_e0004800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_e0004800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 12, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 13, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 14, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 15, __VA_ARGS__)
#define DT_N_S_soc_S_clock_e0004800_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_e0004800, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 9, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 11, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 12, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 13, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 14, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg, 15, __VA_ARGS__)
#define DT_N_S_soc_S_clock_e0004800_P_reg_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names {"CLK_0", "CLK_1"}
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_IDX_0 "CLK_0"
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_IDX_0_STRING_UNQUOTED CLK_0
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_IDX_0_STRING_TOKEN CLK_0
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_IDX_0_STRING_UPPER_TOKEN CLK_0
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_IDX_1 "CLK_1"
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_IDX_1_STRING_UNQUOTED CLK_1
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_IDX_1_STRING_TOKEN CLK_1
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_IDX_1_STRING_UPPER_TOKEN CLK_1
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_e0004800, clock_output_names, 0) \
	fn(DT_N_S_soc_S_clock_e0004800, clock_output_names, 1)
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_e0004800, clock_output_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, clock_output_names, 1)
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_e0004800, clock_output_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, clock_output_names, 1, __VA_ARGS__)
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_e0004800, clock_output_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, clock_output_names, 1, __VA_ARGS__)
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_LEN 2
#define DT_N_S_soc_S_clock_e0004800_P_clock_output_names_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_lock_timeout 10
#define DT_N_S_soc_S_clock_e0004800_P_litex_lock_timeout_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_drdy_timeout 10
#define DT_N_S_soc_S_clock_e0004800_P_litex_drdy_timeout_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_sys_clock_frequency 100000000
#define DT_N_S_soc_S_clock_e0004800_P_litex_sys_clock_frequency_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_divclk_divide_min 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_divclk_divide_min_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_divclk_divide_max 107
#define DT_N_S_soc_S_clock_e0004800_P_litex_divclk_divide_max_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_clkfbout_mult_min 2
#define DT_N_S_soc_S_clock_e0004800_P_litex_clkfbout_mult_min_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_clkfbout_mult_max 65
#define DT_N_S_soc_S_clock_e0004800_P_litex_clkfbout_mult_max_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_vco_freq_min 600000000
#define DT_N_S_soc_S_clock_e0004800_P_litex_vco_freq_min_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_vco_freq_max 1200000000
#define DT_N_S_soc_S_clock_e0004800_P_litex_vco_freq_max_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_clkout_divide_min 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_clkout_divide_min_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_clkout_divide_max 126
#define DT_N_S_soc_S_clock_e0004800_P_litex_clkout_divide_max_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_litex_vco_margin 0
#define DT_N_S_soc_S_clock_e0004800_P_litex_vco_margin_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_status "disabled"
#define DT_N_S_soc_S_clock_e0004800_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_clock_e0004800_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_clock_e0004800_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_clock_e0004800_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_clock_e0004800_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_clock_e0004800_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_clock_e0004800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_e0004800, status, 0) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 1) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 2) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 3) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 4) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 5) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 6) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 7)
#define DT_N_S_soc_S_clock_e0004800_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_e0004800, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 7)
#define DT_N_S_soc_S_clock_e0004800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_e0004800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_clock_e0004800_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_e0004800, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_clock_e0004800_P_status_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_compatible {"litex,clk"}
#define DT_N_S_soc_S_clock_e0004800_P_compatible_IDX_0 "litex,clk"
#define DT_N_S_soc_S_clock_e0004800_P_compatible_IDX_0_STRING_UNQUOTED litex,clk
#define DT_N_S_soc_S_clock_e0004800_P_compatible_IDX_0_STRING_TOKEN litex_clk
#define DT_N_S_soc_S_clock_e0004800_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_CLK
#define DT_N_S_soc_S_clock_e0004800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_e0004800, compatible, 0)
#define DT_N_S_soc_S_clock_e0004800_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_e0004800, compatible, 0)
#define DT_N_S_soc_S_clock_e0004800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_e0004800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clock_e0004800_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_e0004800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_clock_e0004800_P_compatible_LEN 1
#define DT_N_S_soc_S_clock_e0004800_P_compatible_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_names {"drp_reset", "drp_locked", "drp_read", "drp_write", "drp_drdy", "drp_adr", "drp_dat_w", "drp_dat_r"}
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_0 "drp_reset"
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_0_STRING_UNQUOTED drp_reset
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_0_STRING_TOKEN drp_reset
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_0_STRING_UPPER_TOKEN DRP_RESET
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_1 "drp_locked"
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_1_STRING_UNQUOTED drp_locked
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_1_STRING_TOKEN drp_locked
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_1_STRING_UPPER_TOKEN DRP_LOCKED
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_2 "drp_read"
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_2_STRING_UNQUOTED drp_read
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_2_STRING_TOKEN drp_read
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_2_STRING_UPPER_TOKEN DRP_READ
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_2_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_3 "drp_write"
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_3_STRING_UNQUOTED drp_write
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_3_STRING_TOKEN drp_write
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_3_STRING_UPPER_TOKEN DRP_WRITE
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_3_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_4 "drp_drdy"
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_4_STRING_UNQUOTED drp_drdy
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_4_STRING_TOKEN drp_drdy
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_4_STRING_UPPER_TOKEN DRP_DRDY
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_4_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_5 "drp_adr"
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_5_STRING_UNQUOTED drp_adr
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_5_STRING_TOKEN drp_adr
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_5_STRING_UPPER_TOKEN DRP_ADR
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_5_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_6 "drp_dat_w"
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_6_STRING_UNQUOTED drp_dat_w
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_6_STRING_TOKEN drp_dat_w
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_6_STRING_UPPER_TOKEN DRP_DAT_W
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_6_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_7 "drp_dat_r"
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_7_STRING_UNQUOTED drp_dat_r
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_7_STRING_TOKEN drp_dat_r
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_7_STRING_UPPER_TOKEN DRP_DAT_R
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_IDX_7_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_e0004800, reg_names, 0) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 1) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 2) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 3) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 4) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 5) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 6) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 7)
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_e0004800, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 7)
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_e0004800, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 7, __VA_ARGS__)
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_e0004800, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, reg_names, 7, __VA_ARGS__)
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_LEN 8
#define DT_N_S_soc_S_clock_e0004800_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_clocks_IDX_0_PH DT_N_S_soc_S_clock_outputs_S_clock_controller_0
#define DT_N_S_soc_S_clock_e0004800_P_clocks_IDX_0_VAL_id 0
#define DT_N_S_soc_S_clock_e0004800_P_clocks_IDX_0_VAL_id_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_clocks_IDX_1_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_clocks_IDX_1_PH DT_N_S_soc_S_clock_outputs_S_clock_controller_1
#define DT_N_S_soc_S_clock_e0004800_P_clocks_IDX_1_VAL_id 1
#define DT_N_S_soc_S_clock_e0004800_P_clocks_IDX_1_VAL_id_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_clock_e0004800, clocks, 0) \
	fn(DT_N_S_soc_S_clock_e0004800, clocks, 1)
#define DT_N_S_soc_S_clock_e0004800_P_clocks_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_clock_e0004800, clocks, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, clocks, 1)
#define DT_N_S_soc_S_clock_e0004800_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_clock_e0004800, clocks, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_clock_e0004800, clocks, 1, __VA_ARGS__)
#define DT_N_S_soc_S_clock_e0004800_P_clocks_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_clock_e0004800, clocks, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_clock_e0004800, clocks, 1, __VA_ARGS__)
#define DT_N_S_soc_S_clock_e0004800_P_clocks_LEN 2
#define DT_N_S_soc_S_clock_e0004800_P_clocks_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_wakeup_source 0
#define DT_N_S_soc_S_clock_e0004800_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_clock_e0004800_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_clock_e0004800_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/dna@e0003800
 *
 * Node identifier: DT_N_S_soc_S_dna_e0003800
 *
 * Binding (compatible = litex,dna0):
 *   $ZEPHYR_BASE/dts/bindings/hwinfo/litex,dna0.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_dna_e0003800_PATH "/soc/dna@e0003800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_dna_e0003800_FULL_NAME "dna@e0003800"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_dna_e0003800_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_dna_e0003800_CHILD_IDX 5

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_dna_e0003800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_dna_e0003800_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_dna_e0003800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_dna_e0003800_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_dna_e0003800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_dna_e0003800_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_dna_e0003800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_dna_e0003800_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_dna_e0003800_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_dna_e0003800_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_dna_e0003800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_dna_e0003800_EXISTS 1
#define DT_N_INST_0_litex_dna0 DT_N_S_soc_S_dna_e0003800
#define DT_N_NODELABEL_dna0    DT_N_S_soc_S_dna_e0003800

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_dna_e0003800_REG_NUM 1
#define DT_N_S_soc_S_dna_e0003800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dna_e0003800_REG_IDX_0_VAL_ADDRESS 3758110720 /* 0xe0003800 */
#define DT_N_S_soc_S_dna_e0003800_REG_IDX_0_VAL_SIZE 32 /* 0x20 */
#define DT_N_S_soc_S_dna_e0003800_REG_NAME_mem_VAL_ADDRESS DT_N_S_soc_S_dna_e0003800_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_dna_e0003800_REG_NAME_mem_VAL_SIZE DT_N_S_soc_S_dna_e0003800_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_dna_e0003800_RANGES_NUM 0
#define DT_N_S_soc_S_dna_e0003800_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_dna_e0003800_IRQ_NUM 0
#define DT_N_S_soc_S_dna_e0003800_COMPAT_MATCHES_litex_dna0 1
#define DT_N_S_soc_S_dna_e0003800_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dna_e0003800_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_dna_e0003800_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dna_e0003800_COMPAT_MODEL_IDX_0 "dna0"
#define DT_N_S_soc_S_dna_e0003800_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_dna_e0003800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_dna_e0003800_P_reg {3758110720 /* 0xe0003800 */, 32 /* 0x20 */}
#define DT_N_S_soc_S_dna_e0003800_P_reg_IDX_0 3758110720
#define DT_N_S_soc_S_dna_e0003800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dna_e0003800_P_reg_IDX_1 32
#define DT_N_S_soc_S_dna_e0003800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_dna_e0003800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dna_e0003800, reg, 0) \
	fn(DT_N_S_soc_S_dna_e0003800, reg, 1)
#define DT_N_S_soc_S_dna_e0003800_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dna_e0003800, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, reg, 1)
#define DT_N_S_soc_S_dna_e0003800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dna_e0003800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dna_e0003800, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_dna_e0003800_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dna_e0003800, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_dna_e0003800_P_reg_EXISTS 1
#define DT_N_S_soc_S_dna_e0003800_P_status "disabled"
#define DT_N_S_soc_S_dna_e0003800_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_dna_e0003800_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_dna_e0003800_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_dna_e0003800_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_dna_e0003800_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_dna_e0003800_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_dna_e0003800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dna_e0003800, status, 0) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 1) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 2) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 3) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 4) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 5) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 6) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 7)
#define DT_N_S_soc_S_dna_e0003800_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dna_e0003800, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 7)
#define DT_N_S_soc_S_dna_e0003800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dna_e0003800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_dna_e0003800, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_dna_e0003800_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dna_e0003800, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_dna_e0003800, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_dna_e0003800_P_status_EXISTS 1
#define DT_N_S_soc_S_dna_e0003800_P_compatible {"litex,dna0"}
#define DT_N_S_soc_S_dna_e0003800_P_compatible_IDX_0 "litex,dna0"
#define DT_N_S_soc_S_dna_e0003800_P_compatible_IDX_0_STRING_UNQUOTED litex,dna0
#define DT_N_S_soc_S_dna_e0003800_P_compatible_IDX_0_STRING_TOKEN litex_dna0
#define DT_N_S_soc_S_dna_e0003800_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_DNA0
#define DT_N_S_soc_S_dna_e0003800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dna_e0003800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dna_e0003800, compatible, 0)
#define DT_N_S_soc_S_dna_e0003800_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dna_e0003800, compatible, 0)
#define DT_N_S_soc_S_dna_e0003800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dna_e0003800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dna_e0003800_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dna_e0003800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dna_e0003800_P_compatible_LEN 1
#define DT_N_S_soc_S_dna_e0003800_P_compatible_EXISTS 1
#define DT_N_S_soc_S_dna_e0003800_P_reg_names {"mem"}
#define DT_N_S_soc_S_dna_e0003800_P_reg_names_IDX_0 "mem"
#define DT_N_S_soc_S_dna_e0003800_P_reg_names_IDX_0_STRING_UNQUOTED mem
#define DT_N_S_soc_S_dna_e0003800_P_reg_names_IDX_0_STRING_TOKEN mem
#define DT_N_S_soc_S_dna_e0003800_P_reg_names_IDX_0_STRING_UPPER_TOKEN MEM
#define DT_N_S_soc_S_dna_e0003800_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_dna_e0003800_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_dna_e0003800, reg_names, 0)
#define DT_N_S_soc_S_dna_e0003800_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_dna_e0003800, reg_names, 0)
#define DT_N_S_soc_S_dna_e0003800_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_dna_e0003800, reg_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dna_e0003800_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_dna_e0003800, reg_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_dna_e0003800_P_reg_names_LEN 1
#define DT_N_S_soc_S_dna_e0003800_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_dna_e0003800_P_wakeup_source 0
#define DT_N_S_soc_S_dna_e0003800_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_dna_e0003800_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_dna_e0003800_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@bc0
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_bc0
 *
 * Binding (compatible = vexriscv-intc0):
 *   $ZEPHYR_BASE/dts/bindings/interrupt-controller/vexriscv-intc0.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_bc0_PATH "/soc/interrupt-controller@bc0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_bc0_FULL_NAME "interrupt-controller@bc0"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_bc0_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_interrupt_controller_bc0_CHILD_IDX 0

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_interrupt_controller_bc0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_bc0_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_bc0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_bc0_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_interrupt_controller_bc0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_bc0_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_interrupt_controller_bc0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_bc0_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_bc0_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_bc0_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_bc0_SUPPORTS_ORDS \
	12, /* /soc/ethernet@e0009800 */ \
	14, /* /soc/gpio@e0006000 */ \
	16, /* /soc/i2s_rx@e000a800 */ \
	17, /* /soc/i2s_tx@e000b000 */ \
	20, /* /soc/serial@e0001800 */ \
	22, /* /soc/timer@e0002800 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_bc0_EXISTS 1
#define DT_N_INST_0_vexriscv_intc0 DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_NODELABEL_intc0       DT_N_S_soc_S_interrupt_controller_bc0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_bc0_REG_NUM 2
#define DT_N_S_soc_S_interrupt_controller_bc0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_REG_IDX_0_VAL_ADDRESS 3008 /* 0xbc0 */
#define DT_N_S_soc_S_interrupt_controller_bc0_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_interrupt_controller_bc0_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_REG_IDX_1_VAL_ADDRESS 4032 /* 0xfc0 */
#define DT_N_S_soc_S_interrupt_controller_bc0_REG_IDX_1_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_interrupt_controller_bc0_REG_NAME_irq_mask_VAL_ADDRESS DT_N_S_soc_S_interrupt_controller_bc0_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_interrupt_controller_bc0_REG_NAME_irq_mask_VAL_SIZE DT_N_S_soc_S_interrupt_controller_bc0_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_interrupt_controller_bc0_REG_NAME_irq_pending_VAL_ADDRESS DT_N_S_soc_S_interrupt_controller_bc0_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_soc_S_interrupt_controller_bc0_REG_NAME_irq_pending_VAL_SIZE DT_N_S_soc_S_interrupt_controller_bc0_REG_IDX_1_VAL_SIZE
#define DT_N_S_soc_S_interrupt_controller_bc0_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_bc0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_bc0_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_bc0_COMPAT_MATCHES_vexriscv_intc0 1
#define DT_N_S_soc_S_interrupt_controller_bc0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_bc0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg {3008 /* 0xbc0 */, 4 /* 0x4 */, 4032 /* 0xfc0 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_IDX_0 3008
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_IDX_1 4
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_IDX_2 4032
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_IDX_3 4
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 1) \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 2) \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 3)
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 3)
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_riscv_max_priority 7
#define DT_N_S_soc_S_interrupt_controller_bc0_P_riscv_max_priority_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_compatible {"vexriscv-intc0"}
#define DT_N_S_soc_S_interrupt_controller_bc0_P_compatible_IDX_0 "vexriscv-intc0"
#define DT_N_S_soc_S_interrupt_controller_bc0_P_compatible_IDX_0_STRING_UNQUOTED vexriscv-intc0
#define DT_N_S_soc_S_interrupt_controller_bc0_P_compatible_IDX_0_STRING_TOKEN vexriscv_intc0
#define DT_N_S_soc_S_interrupt_controller_bc0_P_compatible_IDX_0_STRING_UPPER_TOKEN VEXRISCV_INTC0
#define DT_N_S_soc_S_interrupt_controller_bc0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_bc0, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_bc0_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_bc0, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_bc0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_bc0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_bc0_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_bc0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_bc0_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names {"irq_mask", "irq_pending"}
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_IDX_0 "irq_mask"
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_IDX_0_STRING_UNQUOTED irq_mask
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_IDX_0_STRING_TOKEN irq_mask
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_IDX_0_STRING_UPPER_TOKEN IRQ_MASK
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_IDX_1 "irq_pending"
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_IDX_1_STRING_UNQUOTED irq_pending
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_IDX_1_STRING_TOKEN irq_pending
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_IDX_1_STRING_UPPER_TOKEN IRQ_PENDING
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_bc0, reg_names, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg_names, 1)
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_interrupt_controller_bc0, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg_names, 1)
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_bc0, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg_names, 1, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_interrupt_controller_bc0, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_interrupt_controller_bc0, reg_names, 1, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_LEN 2
#define DT_N_S_soc_S_interrupt_controller_bc0_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_bc0_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_bc0_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_interrupt_controller_bc0_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/ethernet@e0009800
 *
 * Node identifier: DT_N_S_soc_S_ethernet_e0009800
 *
 * Binding (compatible = litex,eth0):
 *   $ZEPHYR_BASE/dts/bindings/ethernet/litex,eth0.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ethernet_e0009800_PATH "/soc/ethernet@e0009800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ethernet_e0009800_FULL_NAME "ethernet@e0009800"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ethernet_e0009800_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_ethernet_e0009800_CHILD_IDX 4

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_ethernet_e0009800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ethernet_e0009800_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_ethernet_e0009800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ethernet_e0009800_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_ethernet_e0009800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ethernet_e0009800_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_ethernet_e0009800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_ethernet_e0009800_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ethernet_e0009800_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ethernet_e0009800_REQUIRES_ORDS \
	5, /* /soc */ \
	11, /* /soc/interrupt-controller@bc0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ethernet_e0009800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ethernet_e0009800_EXISTS 1
#define DT_N_INST_0_litex_eth0 DT_N_S_soc_S_ethernet_e0009800
#define DT_N_NODELABEL_eth0    DT_N_S_soc_S_ethernet_e0009800

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ethernet_e0009800_REG_NUM 15
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_0_VAL_ADDRESS 4026537984 /* 0xf0001800 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_1_VAL_ADDRESS 4026537988 /* 0xf0001804 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_1_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_2_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_2_VAL_ADDRESS 4026537992 /* 0xf0001808 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_2_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_3_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_3_VAL_ADDRESS 4026537996 /* 0xf000180c */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_3_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_4_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_4_VAL_ADDRESS 4026538000 /* 0xf0001810 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_4_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_5_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_5_VAL_ADDRESS 4026538004 /* 0xf0001814 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_5_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_6_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_6_VAL_ADDRESS 4026538008 /* 0xf0001818 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_6_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_7_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_7_VAL_ADDRESS 4026538012 /* 0xf000181c */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_7_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_8_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_8_VAL_ADDRESS 4026538016 /* 0xf0001820 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_8_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_9_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_9_VAL_ADDRESS 4026538020 /* 0xf0001824 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_9_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_10_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_10_VAL_ADDRESS 4026538024 /* 0xf0001828 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_10_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_11_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_11_VAL_ADDRESS 4026538028 /* 0xf000182c */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_11_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_12_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_12_VAL_ADDRESS 4026538032 /* 0xf0001830 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_12_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_13_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_13_VAL_ADDRESS 4026538036 /* 0xf0001834 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_13_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_14_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_14_VAL_ADDRESS 2147483648 /* 0x80000000 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_IDX_14_VAL_SIZE 8192 /* 0x2000 */
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_rx_slot_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_rx_slot_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_rx_length_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_rx_length_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_1_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_rx_errors_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_2_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_rx_errors_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_2_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_rx_ev_status_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_3_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_rx_ev_status_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_3_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_rx_ev_pending_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_4_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_rx_ev_pending_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_4_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_rx_ev_enable_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_5_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_rx_ev_enable_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_5_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_start_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_6_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_start_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_6_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_ready_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_7_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_ready_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_7_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_level_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_8_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_level_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_8_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_slot_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_9_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_slot_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_9_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_length_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_10_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_length_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_10_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_ev_status_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_11_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_ev_status_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_11_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_ev_pending_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_12_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_ev_pending_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_12_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_ev_enable_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_13_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_tx_ev_enable_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_13_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_buffers_VAL_ADDRESS DT_N_S_soc_S_ethernet_e0009800_REG_IDX_14_VAL_ADDRESS
#define DT_N_S_soc_S_ethernet_e0009800_REG_NAME_buffers_VAL_SIZE DT_N_S_soc_S_ethernet_e0009800_REG_IDX_14_VAL_SIZE
#define DT_N_S_soc_S_ethernet_e0009800_RANGES_NUM 0
#define DT_N_S_soc_S_ethernet_e0009800_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ethernet_e0009800_IRQ_NUM 1
#define DT_N_S_soc_S_ethernet_e0009800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_IRQ_IDX_0_VAL_irq 2
#define DT_N_S_soc_S_ethernet_e0009800_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_ethernet_e0009800_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_COMPAT_MATCHES_litex_eth0 1
#define DT_N_S_soc_S_ethernet_e0009800_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_ethernet_e0009800_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_COMPAT_MODEL_IDX_0 "eth0"
#define DT_N_S_soc_S_ethernet_e0009800_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ethernet_e0009800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ethernet_e0009800_P_reg {4026537984 /* 0xf0001800 */, 4 /* 0x4 */, 4026537988 /* 0xf0001804 */, 4 /* 0x4 */, 4026537992 /* 0xf0001808 */, 4 /* 0x4 */, 4026537996 /* 0xf000180c */, 4 /* 0x4 */, 4026538000 /* 0xf0001810 */, 4 /* 0x4 */, 4026538004 /* 0xf0001814 */, 4 /* 0x4 */, 4026538008 /* 0xf0001818 */, 4 /* 0x4 */, 4026538012 /* 0xf000181c */, 4 /* 0x4 */, 4026538016 /* 0xf0001820 */, 4 /* 0x4 */, 4026538020 /* 0xf0001824 */, 4 /* 0x4 */, 4026538024 /* 0xf0001828 */, 4 /* 0x4 */, 4026538028 /* 0xf000182c */, 4 /* 0x4 */, 4026538032 /* 0xf0001830 */, 4 /* 0x4 */, 4026538036 /* 0xf0001834 */, 4 /* 0x4 */, 2147483648 /* 0x80000000 */, 8192 /* 0x2000 */}
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_0 4026537984
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_1 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_2 4026537988
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_3 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_4 4026537992
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_4_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_5 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_5_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_6 4026537996
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_6_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_7 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_7_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_8 4026538000
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_8_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_9 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_9_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_10 4026538004
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_10_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_11 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_11_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_12 4026538008
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_12_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_13 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_13_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_14 4026538012
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_14_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_15 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_15_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_16 4026538016
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_16_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_17 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_17_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_18 4026538020
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_18_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_19 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_19_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_20 4026538024
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_20_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_21 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_21_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_22 4026538028
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_22_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_23 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_23_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_24 4026538032
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_24_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_25 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_25_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_26 4026538036
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_26_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_27 4
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_27_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_28 2147483648
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_28_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_29 8192
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_IDX_29_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_e0009800, reg, 0) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 1) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 2) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 3) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 4) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 5) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 6) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 7) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 8) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 9) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 10) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 11) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 12) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 13) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 14) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 15) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 16) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 17) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 18) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 19) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 20) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 21) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 22) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 23) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 24) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 25) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 26) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 27) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 28) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 29)
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ethernet_e0009800, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 9) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 10) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 11) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 12) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 13) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 14) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 15) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 16) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 17) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 18) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 19) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 20) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 21) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 22) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 23) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 24) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 25) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 26) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 27) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 28) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 29)
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_e0009800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 12, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 13, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 14, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 15, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 16, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 17, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 18, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 19, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 20, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 21, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 22, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 23, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 24, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 25, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 26, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 27, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 28, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 29, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ethernet_e0009800, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 9, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 11, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 12, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 13, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 14, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 15, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 16, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 17, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 18, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 19, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 20, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 21, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 22, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 23, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 24, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 25, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 26, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 27, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 28, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg, 29, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupts {2 /* 0x2 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupts_IDX_0 2
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_e0009800, interrupts, 0) \
	fn(DT_N_S_soc_S_ethernet_e0009800, interrupts, 1)
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ethernet_e0009800, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, interrupts, 1)
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_e0009800, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ethernet_e0009800, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address {16 /* 0x10 */, 226 /* 0xe2 */, 213 /* 0xd5 */, 0 /* 0x0 */, 0 /* 0x0 */, 2 /* 0x2 */}
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_IDX_0 16
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_IDX_1 226
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_IDX_2 213
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_IDX_2_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_IDX_3 0
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_IDX_3_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_IDX_4 0
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_IDX_4_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_IDX_5 2
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_IDX_5_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 0) \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 1) \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 2) \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 3) \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 4) \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 5)
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 5)
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 5, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, local_mac_address, 5, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_LEN 6
#define DT_N_S_soc_S_ethernet_e0009800_P_local_mac_address_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_zephyr_random_mac_address 0
#define DT_N_S_soc_S_ethernet_e0009800_P_zephyr_random_mac_address_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_status "okay"
#define DT_N_S_soc_S_ethernet_e0009800_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_ethernet_e0009800_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_ethernet_e0009800_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_ethernet_e0009800_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_ethernet_e0009800_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_ethernet_e0009800_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_ethernet_e0009800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_e0009800, status, 0) \
	fn(DT_N_S_soc_S_ethernet_e0009800, status, 1) \
	fn(DT_N_S_soc_S_ethernet_e0009800, status, 2) \
	fn(DT_N_S_soc_S_ethernet_e0009800, status, 3)
#define DT_N_S_soc_S_ethernet_e0009800_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ethernet_e0009800, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, status, 3)
#define DT_N_S_soc_S_ethernet_e0009800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_e0009800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_e0009800_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ethernet_e0009800, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_e0009800_P_status_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_compatible {"litex,eth0"}
#define DT_N_S_soc_S_ethernet_e0009800_P_compatible_IDX_0 "litex,eth0"
#define DT_N_S_soc_S_ethernet_e0009800_P_compatible_IDX_0_STRING_UNQUOTED litex,eth0
#define DT_N_S_soc_S_ethernet_e0009800_P_compatible_IDX_0_STRING_TOKEN litex_eth0
#define DT_N_S_soc_S_ethernet_e0009800_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_ETH0
#define DT_N_S_soc_S_ethernet_e0009800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_e0009800, compatible, 0)
#define DT_N_S_soc_S_ethernet_e0009800_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ethernet_e0009800, compatible, 0)
#define DT_N_S_soc_S_ethernet_e0009800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_e0009800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_e0009800_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ethernet_e0009800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_e0009800_P_compatible_LEN 1
#define DT_N_S_soc_S_ethernet_e0009800_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names {"rx_slot", "rx_length", "rx_errors", "rx_ev_status", "rx_ev_pending", "rx_ev_enable", "tx_start", "tx_ready", "tx_level", "tx_slot", "tx_length", "tx_ev_status", "tx_ev_pending", "tx_ev_enable", "buffers"}
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_0 "rx_slot"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_0_STRING_UNQUOTED rx_slot
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_0_STRING_TOKEN rx_slot
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_0_STRING_UPPER_TOKEN RX_SLOT
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_1 "rx_length"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_1_STRING_UNQUOTED rx_length
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_1_STRING_TOKEN rx_length
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_1_STRING_UPPER_TOKEN RX_LENGTH
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_2 "rx_errors"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_2_STRING_UNQUOTED rx_errors
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_2_STRING_TOKEN rx_errors
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_2_STRING_UPPER_TOKEN RX_ERRORS
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_2_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_3 "rx_ev_status"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_3_STRING_UNQUOTED rx_ev_status
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_3_STRING_TOKEN rx_ev_status
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_3_STRING_UPPER_TOKEN RX_EV_STATUS
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_3_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_4 "rx_ev_pending"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_4_STRING_UNQUOTED rx_ev_pending
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_4_STRING_TOKEN rx_ev_pending
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_4_STRING_UPPER_TOKEN RX_EV_PENDING
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_4_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_5 "rx_ev_enable"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_5_STRING_UNQUOTED rx_ev_enable
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_5_STRING_TOKEN rx_ev_enable
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_5_STRING_UPPER_TOKEN RX_EV_ENABLE
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_5_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_6 "tx_start"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_6_STRING_UNQUOTED tx_start
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_6_STRING_TOKEN tx_start
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_6_STRING_UPPER_TOKEN TX_START
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_6_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_7 "tx_ready"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_7_STRING_UNQUOTED tx_ready
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_7_STRING_TOKEN tx_ready
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_7_STRING_UPPER_TOKEN TX_READY
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_7_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_8 "tx_level"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_8_STRING_UNQUOTED tx_level
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_8_STRING_TOKEN tx_level
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_8_STRING_UPPER_TOKEN TX_LEVEL
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_8_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_9 "tx_slot"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_9_STRING_UNQUOTED tx_slot
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_9_STRING_TOKEN tx_slot
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_9_STRING_UPPER_TOKEN TX_SLOT
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_9_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_10 "tx_length"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_10_STRING_UNQUOTED tx_length
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_10_STRING_TOKEN tx_length
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_10_STRING_UPPER_TOKEN TX_LENGTH
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_10_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_11 "tx_ev_status"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_11_STRING_UNQUOTED tx_ev_status
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_11_STRING_TOKEN tx_ev_status
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_11_STRING_UPPER_TOKEN TX_EV_STATUS
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_11_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_12 "tx_ev_pending"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_12_STRING_UNQUOTED tx_ev_pending
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_12_STRING_TOKEN tx_ev_pending
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_12_STRING_UPPER_TOKEN TX_EV_PENDING
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_12_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_13 "tx_ev_enable"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_13_STRING_UNQUOTED tx_ev_enable
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_13_STRING_TOKEN tx_ev_enable
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_13_STRING_UPPER_TOKEN TX_EV_ENABLE
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_13_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_14 "buffers"
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_14_STRING_UNQUOTED buffers
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_14_STRING_TOKEN buffers
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_14_STRING_UPPER_TOKEN BUFFERS
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_IDX_14_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 0) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 1) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 2) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 3) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 4) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 5) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 6) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 7) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 8) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 9) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 10) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 11) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 12) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 13) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 14)
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 9) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 10) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 11) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 12) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 13) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 14)
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 12, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 13, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 14, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 9, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 11, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 12, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 13, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_ethernet_e0009800, reg_names, 14, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_LEN 15
#define DT_N_S_soc_S_ethernet_e0009800_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_ethernet_e0009800_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_wakeup_source 0
#define DT_N_S_soc_S_ethernet_e0009800_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_ethernet_e0009800_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_ethernet_e0009800_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/gpio@e0005800
 *
 * Node identifier: DT_N_S_soc_S_gpio_e0005800
 *
 * Binding (compatible = litex,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/litex,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_e0005800_PATH "/soc/gpio@e0005800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_e0005800_FULL_NAME "gpio@e0005800"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_e0005800_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_e0005800_CHILD_IDX 7

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_e0005800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_e0005800_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_e0005800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_e0005800_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_e0005800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_e0005800_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_e0005800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_e0005800_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_e0005800_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_e0005800_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_e0005800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_e0005800_EXISTS 1
#define DT_N_INST_0_litex_gpio  DT_N_S_soc_S_gpio_e0005800
#define DT_N_NODELABEL_gpio_out DT_N_S_soc_S_gpio_e0005800

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_e0005800_REG_NUM 1
#define DT_N_S_soc_S_gpio_e0005800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_REG_IDX_0_VAL_ADDRESS 3758118912 /* 0xe0005800 */
#define DT_N_S_soc_S_gpio_e0005800_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_gpio_e0005800_REG_NAME_control_VAL_ADDRESS DT_N_S_soc_S_gpio_e0005800_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_gpio_e0005800_REG_NAME_control_VAL_SIZE DT_N_S_soc_S_gpio_e0005800_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_gpio_e0005800_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_e0005800_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_e0005800_IRQ_NUM 0
#define DT_N_S_soc_S_gpio_e0005800_COMPAT_MATCHES_litex_gpio 1
#define DT_N_S_soc_S_gpio_e0005800_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_gpio_e0005800_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_COMPAT_MODEL_IDX_0 "gpio"
#define DT_N_S_soc_S_gpio_e0005800_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_e0005800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_e0005800_P_port_is_output 1
#define DT_N_S_soc_S_gpio_e0005800_P_port_is_output_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_P_reg {3758118912 /* 0xe0005800 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_gpio_e0005800_P_reg_IDX_0 3758118912
#define DT_N_S_soc_S_gpio_e0005800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_P_reg_IDX_1 4
#define DT_N_S_soc_S_gpio_e0005800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_e0005800, reg, 0) \
	fn(DT_N_S_soc_S_gpio_e0005800, reg, 1)
#define DT_N_S_soc_S_gpio_e0005800_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_e0005800, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0005800, reg, 1)
#define DT_N_S_soc_S_gpio_e0005800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_e0005800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0005800, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0005800_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_e0005800, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0005800, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0005800_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_P_ngpios 4
#define DT_N_S_soc_S_gpio_e0005800_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_e0005800_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_P_status "okay"
#define DT_N_S_soc_S_gpio_e0005800_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_e0005800_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_e0005800_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_e0005800_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_e0005800_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_e0005800_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_e0005800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_e0005800, status, 0) \
	fn(DT_N_S_soc_S_gpio_e0005800, status, 1) \
	fn(DT_N_S_soc_S_gpio_e0005800, status, 2) \
	fn(DT_N_S_soc_S_gpio_e0005800, status, 3)
#define DT_N_S_soc_S_gpio_e0005800_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_e0005800, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0005800, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0005800, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0005800, status, 3)
#define DT_N_S_soc_S_gpio_e0005800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_e0005800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0005800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0005800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0005800, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0005800_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_e0005800, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0005800, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0005800, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0005800, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0005800_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_P_compatible {"litex,gpio"}
#define DT_N_S_soc_S_gpio_e0005800_P_compatible_IDX_0 "litex,gpio"
#define DT_N_S_soc_S_gpio_e0005800_P_compatible_IDX_0_STRING_UNQUOTED litex,gpio
#define DT_N_S_soc_S_gpio_e0005800_P_compatible_IDX_0_STRING_TOKEN litex_gpio
#define DT_N_S_soc_S_gpio_e0005800_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_GPIO
#define DT_N_S_soc_S_gpio_e0005800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_e0005800, compatible, 0)
#define DT_N_S_soc_S_gpio_e0005800_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_e0005800, compatible, 0)
#define DT_N_S_soc_S_gpio_e0005800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_e0005800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0005800_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_e0005800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0005800_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_e0005800_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_P_reg_names {"control"}
#define DT_N_S_soc_S_gpio_e0005800_P_reg_names_IDX_0 "control"
#define DT_N_S_soc_S_gpio_e0005800_P_reg_names_IDX_0_STRING_UNQUOTED control
#define DT_N_S_soc_S_gpio_e0005800_P_reg_names_IDX_0_STRING_TOKEN control
#define DT_N_S_soc_S_gpio_e0005800_P_reg_names_IDX_0_STRING_UPPER_TOKEN CONTROL
#define DT_N_S_soc_S_gpio_e0005800_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_e0005800, reg_names, 0)
#define DT_N_S_soc_S_gpio_e0005800_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_e0005800, reg_names, 0)
#define DT_N_S_soc_S_gpio_e0005800_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_e0005800, reg_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0005800_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_e0005800, reg_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0005800_P_reg_names_LEN 1
#define DT_N_S_soc_S_gpio_e0005800_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_e0005800_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_e0005800_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_e0005800_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/gpio@e0006000
 *
 * Node identifier: DT_N_S_soc_S_gpio_e0006000
 *
 * Binding (compatible = litex,gpio):
 *   $ZEPHYR_BASE/dts/bindings/gpio/litex,gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_e0006000_PATH "/soc/gpio@e0006000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_e0006000_FULL_NAME "gpio@e0006000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_e0006000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_e0006000_CHILD_IDX 8

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_gpio_e0006000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_e0006000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_e0006000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_e0006000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_gpio_e0006000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_e0006000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_gpio_e0006000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_e0006000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_e0006000_ORD 14

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_e0006000_REQUIRES_ORDS \
	5, /* /soc */ \
	11, /* /soc/interrupt-controller@bc0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_e0006000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_e0006000_EXISTS 1
#define DT_N_INST_1_litex_gpio DT_N_S_soc_S_gpio_e0006000
#define DT_N_NODELABEL_gpio_in DT_N_S_soc_S_gpio_e0006000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_e0006000_REG_NUM 5
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_0_VAL_ADDRESS 3758120960 /* 0xe0006000 */
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_1_VAL_ADDRESS 3758120964 /* 0xe0006004 */
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_1_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_2_VAL_ADDRESS 3758120968 /* 0xe0006008 */
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_2_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_3_VAL_ADDRESS 3758120976 /* 0xe0006010 */
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_3_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_4_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_4_VAL_ADDRESS 3758120980 /* 0xe0006014 */
#define DT_N_S_soc_S_gpio_e0006000_REG_IDX_4_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_gpio_e0006000_REG_NAME_base_VAL_ADDRESS DT_N_S_soc_S_gpio_e0006000_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_gpio_e0006000_REG_NAME_base_VAL_SIZE DT_N_S_soc_S_gpio_e0006000_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_gpio_e0006000_REG_NAME_irq_mode_VAL_ADDRESS DT_N_S_soc_S_gpio_e0006000_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_soc_S_gpio_e0006000_REG_NAME_irq_mode_VAL_SIZE DT_N_S_soc_S_gpio_e0006000_REG_IDX_1_VAL_SIZE
#define DT_N_S_soc_S_gpio_e0006000_REG_NAME_irq_edge_VAL_ADDRESS DT_N_S_soc_S_gpio_e0006000_REG_IDX_2_VAL_ADDRESS
#define DT_N_S_soc_S_gpio_e0006000_REG_NAME_irq_edge_VAL_SIZE DT_N_S_soc_S_gpio_e0006000_REG_IDX_2_VAL_SIZE
#define DT_N_S_soc_S_gpio_e0006000_REG_NAME_irq_pend_VAL_ADDRESS DT_N_S_soc_S_gpio_e0006000_REG_IDX_3_VAL_ADDRESS
#define DT_N_S_soc_S_gpio_e0006000_REG_NAME_irq_pend_VAL_SIZE DT_N_S_soc_S_gpio_e0006000_REG_IDX_3_VAL_SIZE
#define DT_N_S_soc_S_gpio_e0006000_REG_NAME_irq_en_VAL_ADDRESS DT_N_S_soc_S_gpio_e0006000_REG_IDX_4_VAL_ADDRESS
#define DT_N_S_soc_S_gpio_e0006000_REG_NAME_irq_en_VAL_SIZE DT_N_S_soc_S_gpio_e0006000_REG_IDX_4_VAL_SIZE
#define DT_N_S_soc_S_gpio_e0006000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_e0006000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_e0006000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_e0006000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_IRQ_IDX_0_VAL_irq 4
#define DT_N_S_soc_S_gpio_e0006000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_IRQ_IDX_0_VAL_priority 2
#define DT_N_S_soc_S_gpio_e0006000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_COMPAT_MATCHES_litex_gpio 1
#define DT_N_S_soc_S_gpio_e0006000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_gpio_e0006000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_COMPAT_MODEL_IDX_0 "gpio"
#define DT_N_S_soc_S_gpio_e0006000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_e0006000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_e0006000_P_port_is_output 0
#define DT_N_S_soc_S_gpio_e0006000_P_port_is_output_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg {3758120960 /* 0xe0006000 */, 4 /* 0x4 */, 3758120964 /* 0xe0006004 */, 4 /* 0x4 */, 3758120968 /* 0xe0006008 */, 4 /* 0x4 */, 3758120976 /* 0xe0006010 */, 4 /* 0x4 */, 3758120980 /* 0xe0006014 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_0 3758120960
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_1 4
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_2 3758120964
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_3 4
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_4 3758120968
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_4_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_5 4
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_5_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_6 3758120976
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_6_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_7 4
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_7_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_8 3758120980
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_8_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_9 4
#define DT_N_S_soc_S_gpio_e0006000_P_reg_IDX_9_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_e0006000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 1) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 2) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 3) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 4) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 5) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 6) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 7) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 8) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 9)
#define DT_N_S_soc_S_gpio_e0006000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_e0006000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 9)
#define DT_N_S_soc_S_gpio_e0006000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_e0006000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 9, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0006000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_e0006000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg, 9, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0006000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_ngpios 4
#define DT_N_S_soc_S_gpio_e0006000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_e0006000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_status "okay"
#define DT_N_S_soc_S_gpio_e0006000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_gpio_e0006000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_e0006000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_e0006000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_e0006000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_e0006000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_e0006000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_e0006000, status, 0) \
	fn(DT_N_S_soc_S_gpio_e0006000, status, 1) \
	fn(DT_N_S_soc_S_gpio_e0006000, status, 2) \
	fn(DT_N_S_soc_S_gpio_e0006000, status, 3)
#define DT_N_S_soc_S_gpio_e0006000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_e0006000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, status, 3)
#define DT_N_S_soc_S_gpio_e0006000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_e0006000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0006000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_e0006000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0006000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_compatible {"litex,gpio"}
#define DT_N_S_soc_S_gpio_e0006000_P_compatible_IDX_0 "litex,gpio"
#define DT_N_S_soc_S_gpio_e0006000_P_compatible_IDX_0_STRING_UNQUOTED litex,gpio
#define DT_N_S_soc_S_gpio_e0006000_P_compatible_IDX_0_STRING_TOKEN litex_gpio
#define DT_N_S_soc_S_gpio_e0006000_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_GPIO
#define DT_N_S_soc_S_gpio_e0006000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_e0006000, compatible, 0)
#define DT_N_S_soc_S_gpio_e0006000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_e0006000, compatible, 0)
#define DT_N_S_soc_S_gpio_e0006000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_e0006000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0006000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_e0006000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0006000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_e0006000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names {"base", "irq_mode", "irq_edge", "irq_pend", "irq_en"}
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_0 "base"
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_0_STRING_UNQUOTED base
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_0_STRING_TOKEN base
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_0_STRING_UPPER_TOKEN BASE
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_1 "irq_mode"
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_1_STRING_UNQUOTED irq_mode
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_1_STRING_TOKEN irq_mode
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_1_STRING_UPPER_TOKEN IRQ_MODE
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_2 "irq_edge"
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_2_STRING_UNQUOTED irq_edge
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_2_STRING_TOKEN irq_edge
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_2_STRING_UPPER_TOKEN IRQ_EDGE
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_2_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_3 "irq_pend"
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_3_STRING_UNQUOTED irq_pend
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_3_STRING_TOKEN irq_pend
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_3_STRING_UPPER_TOKEN IRQ_PEND
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_3_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_4 "irq_en"
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_4_STRING_UNQUOTED irq_en
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_4_STRING_TOKEN irq_en
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_4_STRING_UPPER_TOKEN IRQ_EN
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_IDX_4_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 0) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 1) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 2) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 3) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 4)
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 4)
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 4, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, reg_names, 4, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_LEN 5
#define DT_N_S_soc_S_gpio_e0006000_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_interrupts {4 /* 0x4 */, 2 /* 0x2 */}
#define DT_N_S_soc_S_gpio_e0006000_P_interrupts_IDX_0 4
#define DT_N_S_soc_S_gpio_e0006000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_interrupts_IDX_1 2
#define DT_N_S_soc_S_gpio_e0006000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_e0006000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_e0006000, interrupts, 1)
#define DT_N_S_soc_S_gpio_e0006000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_gpio_e0006000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, interrupts, 1)
#define DT_N_S_soc_S_gpio_e0006000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_e0006000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_e0006000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0006000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_gpio_e0006000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_gpio_e0006000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_e0006000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_gpio_e0006000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_gpio_e0006000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_gpio_e0006000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_gpio_e0006000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_e0006000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_gpio_e0006000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_gpio_e0006000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/i2c@e0005000
 *
 * Node identifier: DT_N_S_soc_S_i2c_e0005000
 *
 * Binding (compatible = litex,i2c):
 *   $ZEPHYR_BASE/dts/bindings/i2c/litex,i2c.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2c_e0005000_PATH "/soc/i2c@e0005000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2c_e0005000_FULL_NAME "i2c@e0005000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2c_e0005000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2c_e0005000_CHILD_IDX 6

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2c_e0005000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2c_e0005000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_e0005000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_e0005000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2c_e0005000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2c_e0005000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2c_e0005000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2c_e0005000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2c_e0005000_ORD 15

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2c_e0005000_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2c_e0005000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2c_e0005000_EXISTS 1
#define DT_N_INST_0_litex_i2c DT_N_S_soc_S_i2c_e0005000
#define DT_N_NODELABEL_i2c0   DT_N_S_soc_S_i2c_e0005000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2c_e0005000_REG_NUM 2
#define DT_N_S_soc_S_i2c_e0005000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_REG_IDX_0_VAL_ADDRESS 4026542080 /* 0xf0002800 */
#define DT_N_S_soc_S_i2c_e0005000_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2c_e0005000_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_REG_IDX_1_VAL_ADDRESS 4026542084 /* 0xf0002804 */
#define DT_N_S_soc_S_i2c_e0005000_REG_IDX_1_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2c_e0005000_REG_NAME_write_VAL_ADDRESS DT_N_S_soc_S_i2c_e0005000_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_i2c_e0005000_REG_NAME_write_VAL_SIZE DT_N_S_soc_S_i2c_e0005000_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_i2c_e0005000_REG_NAME_read_VAL_ADDRESS DT_N_S_soc_S_i2c_e0005000_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_soc_S_i2c_e0005000_REG_NAME_read_VAL_SIZE DT_N_S_soc_S_i2c_e0005000_REG_IDX_1_VAL_SIZE
#define DT_N_S_soc_S_i2c_e0005000_RANGES_NUM 0
#define DT_N_S_soc_S_i2c_e0005000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2c_e0005000_IRQ_NUM 0
#define DT_N_S_soc_S_i2c_e0005000_COMPAT_MATCHES_litex_i2c 1
#define DT_N_S_soc_S_i2c_e0005000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_i2c_e0005000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_COMPAT_MODEL_IDX_0 "i2c"
#define DT_N_S_soc_S_i2c_e0005000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2c_e0005000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2c_e0005000_P_reg {4026542080 /* 0xf0002800 */, 4 /* 0x4 */, 4026542084 /* 0xf0002804 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_i2c_e0005000_P_reg_IDX_0 4026542080
#define DT_N_S_soc_S_i2c_e0005000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_P_reg_IDX_1 4
#define DT_N_S_soc_S_i2c_e0005000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_P_reg_IDX_2 4026542084
#define DT_N_S_soc_S_i2c_e0005000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_P_reg_IDX_3 4
#define DT_N_S_soc_S_i2c_e0005000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_e0005000, reg, 0) \
	fn(DT_N_S_soc_S_i2c_e0005000, reg, 1) \
	fn(DT_N_S_soc_S_i2c_e0005000, reg, 2) \
	fn(DT_N_S_soc_S_i2c_e0005000, reg, 3)
#define DT_N_S_soc_S_i2c_e0005000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_e0005000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, reg, 3)
#define DT_N_S_soc_S_i2c_e0005000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_e0005000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_e0005000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_e0005000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_e0005000, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_e0005000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_e0005000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, reg, 3, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_e0005000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_P_status "okay"
#define DT_N_S_soc_S_i2c_e0005000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_i2c_e0005000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_i2c_e0005000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_e0005000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_i2c_e0005000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_i2c_e0005000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_i2c_e0005000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_e0005000, status, 0) \
	fn(DT_N_S_soc_S_i2c_e0005000, status, 1) \
	fn(DT_N_S_soc_S_i2c_e0005000, status, 2) \
	fn(DT_N_S_soc_S_i2c_e0005000, status, 3)
#define DT_N_S_soc_S_i2c_e0005000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_e0005000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, status, 3)
#define DT_N_S_soc_S_i2c_e0005000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_e0005000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_e0005000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_e0005000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_e0005000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_e0005000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_e0005000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_e0005000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_P_compatible {"litex,i2c"}
#define DT_N_S_soc_S_i2c_e0005000_P_compatible_IDX_0 "litex,i2c"
#define DT_N_S_soc_S_i2c_e0005000_P_compatible_IDX_0_STRING_UNQUOTED litex,i2c
#define DT_N_S_soc_S_i2c_e0005000_P_compatible_IDX_0_STRING_TOKEN litex_i2c
#define DT_N_S_soc_S_i2c_e0005000_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_I2C
#define DT_N_S_soc_S_i2c_e0005000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_e0005000, compatible, 0)
#define DT_N_S_soc_S_i2c_e0005000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_e0005000, compatible, 0)
#define DT_N_S_soc_S_i2c_e0005000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_e0005000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_e0005000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_e0005000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_e0005000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2c_e0005000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names {"write", "read"}
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_IDX_0 "write"
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_IDX_0_STRING_UNQUOTED write
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_IDX_0_STRING_TOKEN write
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_IDX_0_STRING_UPPER_TOKEN WRITE
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_IDX_1 "read"
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_IDX_1_STRING_UNQUOTED read
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_IDX_1_STRING_TOKEN read
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_IDX_1_STRING_UPPER_TOKEN READ
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2c_e0005000, reg_names, 0) \
	fn(DT_N_S_soc_S_i2c_e0005000, reg_names, 1)
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2c_e0005000, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, reg_names, 1)
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2c_e0005000, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2c_e0005000, reg_names, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2c_e0005000, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2c_e0005000, reg_names, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_LEN 2
#define DT_N_S_soc_S_i2c_e0005000_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_P_wakeup_source 0
#define DT_N_S_soc_S_i2c_e0005000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_i2c_e0005000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_i2c_e0005000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/i2s_rx@e000a800
 *
 * Node identifier: DT_N_S_soc_S_i2s_rx_e000a800
 *
 * Binding (compatible = litex,i2s):
 *   $ZEPHYR_BASE/dts/bindings/i2s/litex,i2s.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2s_rx_e000a800_PATH "/soc/i2s_rx@e000a800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2s_rx_e000a800_FULL_NAME "i2s_rx@e000a800"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2s_rx_e000a800_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2s_rx_e000a800_CHILD_IDX 11

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2s_rx_e000a800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2s_rx_e000a800_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2s_rx_e000a800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2s_rx_e000a800_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2s_rx_e000a800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2s_rx_e000a800_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2s_rx_e000a800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2s_rx_e000a800_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2s_rx_e000a800_ORD 16

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2s_rx_e000a800_REQUIRES_ORDS \
	5, /* /soc */ \
	11, /* /soc/interrupt-controller@bc0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2s_rx_e000a800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2s_rx_e000a800_EXISTS 1
#define DT_N_INST_0_litex_i2s DT_N_S_soc_S_i2s_rx_e000a800
#define DT_N_NODELABEL_i2s_rx DT_N_S_soc_S_i2s_rx_e000a800

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NUM 7
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_0_VAL_ADDRESS 3758139392 /* 0xe000a800 */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_1_VAL_ADDRESS 3758139396 /* 0xe000a804 */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_1_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_2_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_2_VAL_ADDRESS 3758139400 /* 0xe000a808 */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_2_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_3_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_3_VAL_ADDRESS 3758139404 /* 0xe000a80c */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_3_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_4_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_4_VAL_ADDRESS 3758139408 /* 0xe000a810 */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_4_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_5_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_5_VAL_ADDRESS 3758139412 /* 0xe000a814 */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_5_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_6_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_6_VAL_ADDRESS 2969567232 /* 0xb1000000 */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_6_VAL_SIZE 262144 /* 0x40000 */
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_ev_status_VAL_ADDRESS DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_ev_status_VAL_SIZE DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_ev_pending_VAL_ADDRESS DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_ev_pending_VAL_SIZE DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_1_VAL_SIZE
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_ev_enable_VAL_ADDRESS DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_2_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_ev_enable_VAL_SIZE DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_2_VAL_SIZE
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_rx_ctl_VAL_ADDRESS DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_3_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_rx_ctl_VAL_SIZE DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_3_VAL_SIZE
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_rx_stat_VAL_ADDRESS DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_4_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_rx_stat_VAL_SIZE DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_4_VAL_SIZE
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_rx_conf_VAL_ADDRESS DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_5_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_rx_conf_VAL_SIZE DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_5_VAL_SIZE
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_fifo_VAL_ADDRESS DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_6_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_rx_e000a800_REG_NAME_fifo_VAL_SIZE DT_N_S_soc_S_i2s_rx_e000a800_REG_IDX_6_VAL_SIZE
#define DT_N_S_soc_S_i2s_rx_e000a800_RANGES_NUM 0
#define DT_N_S_soc_S_i2s_rx_e000a800_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2s_rx_e000a800_IRQ_NUM 1
#define DT_N_S_soc_S_i2s_rx_e000a800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_IRQ_IDX_0_VAL_irq 6
#define DT_N_S_soc_S_i2s_rx_e000a800_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_IRQ_IDX_0_VAL_priority 2
#define DT_N_S_soc_S_i2s_rx_e000a800_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_COMPAT_MATCHES_litex_i2s 1
#define DT_N_S_soc_S_i2s_rx_e000a800_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_i2s_rx_e000a800_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_COMPAT_MODEL_IDX_0 "i2s"
#define DT_N_S_soc_S_i2s_rx_e000a800_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2s_rx_e000a800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg {3758139392 /* 0xe000a800 */, 4 /* 0x4 */, 3758139396 /* 0xe000a804 */, 4 /* 0x4 */, 3758139400 /* 0xe000a808 */, 4 /* 0x4 */, 3758139404 /* 0xe000a80c */, 4 /* 0x4 */, 3758139408 /* 0xe000a810 */, 4 /* 0x4 */, 3758139412 /* 0xe000a814 */, 4 /* 0x4 */, 2969567232 /* 0xb1000000 */, 262144 /* 0x40000 */}
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_0 3758139392
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_1 4
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_2 3758139396
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_3 4
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_4 3758139400
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_4_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_5 4
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_5_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_6 3758139404
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_6_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_7 4
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_7_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_8 3758139408
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_8_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_9 4
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_9_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_10 3758139412
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_10_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_11 4
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_11_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_12 2969567232
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_12_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_13 262144
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_IDX_13_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 0) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 1) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 2) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 3) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 4) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 5) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 6) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 7) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 8) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 9) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 10) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 11) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 12) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 13)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 9) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 10) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 11) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 12) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 13)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 12, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 13, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 9, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 11, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 12, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg, 13, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_fifo_depth 256
#define DT_N_S_soc_S_i2s_rx_e000a800_P_fifo_depth_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_status "disabled"
#define DT_N_S_soc_S_i2s_rx_e000a800_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_i2s_rx_e000a800_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_i2s_rx_e000a800_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2s_rx_e000a800_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_i2s_rx_e000a800_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_i2s_rx_e000a800_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2s_rx_e000a800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 0) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 1) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 2) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 3) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 4) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 5) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 6) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 7)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 7)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_status_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_compatible {"litex,i2s"}
#define DT_N_S_soc_S_i2s_rx_e000a800_P_compatible_IDX_0 "litex,i2s"
#define DT_N_S_soc_S_i2s_rx_e000a800_P_compatible_IDX_0_STRING_UNQUOTED litex,i2s
#define DT_N_S_soc_S_i2s_rx_e000a800_P_compatible_IDX_0_STRING_TOKEN litex_i2s
#define DT_N_S_soc_S_i2s_rx_e000a800_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_I2S
#define DT_N_S_soc_S_i2s_rx_e000a800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_rx_e000a800, compatible, 0)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_rx_e000a800, compatible, 0)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_rx_e000a800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_rx_e000a800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_compatible_LEN 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names {"ev_status", "ev_pending", "ev_enable", "rx_ctl", "rx_stat", "rx_conf", "fifo"}
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_0 "ev_status"
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_0_STRING_UNQUOTED ev_status
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_0_STRING_TOKEN ev_status
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_0_STRING_UPPER_TOKEN EV_STATUS
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_1 "ev_pending"
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_1_STRING_UNQUOTED ev_pending
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_1_STRING_TOKEN ev_pending
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_1_STRING_UPPER_TOKEN EV_PENDING
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_2 "ev_enable"
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_2_STRING_UNQUOTED ev_enable
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_2_STRING_TOKEN ev_enable
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_2_STRING_UPPER_TOKEN EV_ENABLE
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_2_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_3 "rx_ctl"
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_3_STRING_UNQUOTED rx_ctl
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_3_STRING_TOKEN rx_ctl
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_3_STRING_UPPER_TOKEN RX_CTL
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_3_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_4 "rx_stat"
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_4_STRING_UNQUOTED rx_stat
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_4_STRING_TOKEN rx_stat
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_4_STRING_UPPER_TOKEN RX_STAT
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_4_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_5 "rx_conf"
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_5_STRING_UNQUOTED rx_conf
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_5_STRING_TOKEN rx_conf
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_5_STRING_UPPER_TOKEN RX_CONF
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_5_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_6 "fifo"
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_6_STRING_UNQUOTED fifo
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_6_STRING_TOKEN fifo
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_6_STRING_UPPER_TOKEN FIFO
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_IDX_6_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 0) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 1) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 2) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 3) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 4) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 5) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 6)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 6)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 6, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, reg_names, 6, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_LEN 7
#define DT_N_S_soc_S_i2s_rx_e000a800_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupts {6 /* 0x6 */, 2 /* 0x2 */}
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupts_IDX_0 6
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupts_IDX_1 2
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_rx_e000a800, interrupts, 0) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, interrupts, 1)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_rx_e000a800, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, interrupts, 1)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_rx_e000a800, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_rx_e000a800, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_rx_e000a800, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_wakeup_source 0
#define DT_N_S_soc_S_i2s_rx_e000a800_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_i2s_rx_e000a800_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_i2s_rx_e000a800_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/i2s_tx@e000b000
 *
 * Node identifier: DT_N_S_soc_S_i2s_tx_e000b000
 *
 * Binding (compatible = litex,i2s):
 *   $ZEPHYR_BASE/dts/bindings/i2s/litex,i2s.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_i2s_tx_e000b000_PATH "/soc/i2s_tx@e000b000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_i2s_tx_e000b000_FULL_NAME "i2s_tx@e000b000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_i2s_tx_e000b000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_i2s_tx_e000b000_CHILD_IDX 12

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_i2s_tx_e000b000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_i2s_tx_e000b000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_i2s_tx_e000b000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2s_tx_e000b000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_i2s_tx_e000b000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_i2s_tx_e000b000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_i2s_tx_e000b000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_i2s_tx_e000b000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_i2s_tx_e000b000_ORD 17

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_i2s_tx_e000b000_REQUIRES_ORDS \
	5, /* /soc */ \
	11, /* /soc/interrupt-controller@bc0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_i2s_tx_e000b000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_i2s_tx_e000b000_EXISTS 1
#define DT_N_INST_1_litex_i2s DT_N_S_soc_S_i2s_tx_e000b000
#define DT_N_NODELABEL_i2s_tx DT_N_S_soc_S_i2s_tx_e000b000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NUM 7
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_0_VAL_ADDRESS 3758141440 /* 0xe000b000 */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_1_VAL_ADDRESS 3758141444 /* 0xe000b004 */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_1_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_2_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_2_VAL_ADDRESS 3758141448 /* 0xe000b008 */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_2_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_3_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_3_VAL_ADDRESS 3758141452 /* 0xe000b00c */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_3_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_4_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_4_VAL_ADDRESS 3758141456 /* 0xe000b010 */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_4_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_5_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_5_VAL_ADDRESS 3758141460 /* 0xe000b014 */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_5_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_6_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_6_VAL_ADDRESS 2986344448 /* 0xb2000000 */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_6_VAL_SIZE 262144 /* 0x40000 */
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_ev_status_VAL_ADDRESS DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_ev_status_VAL_SIZE DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_ev_pending_VAL_ADDRESS DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_ev_pending_VAL_SIZE DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_1_VAL_SIZE
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_ev_enable_VAL_ADDRESS DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_2_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_ev_enable_VAL_SIZE DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_2_VAL_SIZE
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_tx_ctl_VAL_ADDRESS DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_3_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_tx_ctl_VAL_SIZE DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_3_VAL_SIZE
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_tx_stat_VAL_ADDRESS DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_4_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_tx_stat_VAL_SIZE DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_4_VAL_SIZE
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_tx_conf_VAL_ADDRESS DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_5_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_tx_conf_VAL_SIZE DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_5_VAL_SIZE
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_fifo_VAL_ADDRESS DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_6_VAL_ADDRESS
#define DT_N_S_soc_S_i2s_tx_e000b000_REG_NAME_fifo_VAL_SIZE DT_N_S_soc_S_i2s_tx_e000b000_REG_IDX_6_VAL_SIZE
#define DT_N_S_soc_S_i2s_tx_e000b000_RANGES_NUM 0
#define DT_N_S_soc_S_i2s_tx_e000b000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_i2s_tx_e000b000_IRQ_NUM 1
#define DT_N_S_soc_S_i2s_tx_e000b000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_IRQ_IDX_0_VAL_irq 7
#define DT_N_S_soc_S_i2s_tx_e000b000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_IRQ_IDX_0_VAL_priority 2
#define DT_N_S_soc_S_i2s_tx_e000b000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_COMPAT_MATCHES_litex_i2s 1
#define DT_N_S_soc_S_i2s_tx_e000b000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_i2s_tx_e000b000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_COMPAT_MODEL_IDX_0 "i2s"
#define DT_N_S_soc_S_i2s_tx_e000b000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_i2s_tx_e000b000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg {3758141440 /* 0xe000b000 */, 4 /* 0x4 */, 3758141444 /* 0xe000b004 */, 4 /* 0x4 */, 3758141448 /* 0xe000b008 */, 4 /* 0x4 */, 3758141452 /* 0xe000b00c */, 4 /* 0x4 */, 3758141456 /* 0xe000b010 */, 4 /* 0x4 */, 3758141460 /* 0xe000b014 */, 4 /* 0x4 */, 2986344448 /* 0xb2000000 */, 262144 /* 0x40000 */}
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_0 3758141440
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_1 4
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_2 3758141444
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_3 4
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_4 3758141448
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_4_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_5 4
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_5_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_6 3758141452
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_6_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_7 4
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_7_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_8 3758141456
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_8_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_9 4
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_9_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_10 3758141460
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_10_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_11 4
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_11_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_12 2986344448
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_12_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_13 262144
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_IDX_13_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 0) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 1) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 2) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 3) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 4) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 5) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 6) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 7) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 8) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 9) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 10) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 11) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 12) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 13)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 9) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 10) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 11) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 12) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 13)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 12, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 13, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 9, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 11, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 12, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg, 13, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_fifo_depth 256
#define DT_N_S_soc_S_i2s_tx_e000b000_P_fifo_depth_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_status "disabled"
#define DT_N_S_soc_S_i2s_tx_e000b000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_i2s_tx_e000b000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_i2s_tx_e000b000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2s_tx_e000b000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_i2s_tx_e000b000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_i2s_tx_e000b000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_i2s_tx_e000b000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 0) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 1) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 2) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 3) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 4) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 5) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 6) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 7)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 7)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_status_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_compatible {"litex,i2s"}
#define DT_N_S_soc_S_i2s_tx_e000b000_P_compatible_IDX_0 "litex,i2s"
#define DT_N_S_soc_S_i2s_tx_e000b000_P_compatible_IDX_0_STRING_UNQUOTED litex,i2s
#define DT_N_S_soc_S_i2s_tx_e000b000_P_compatible_IDX_0_STRING_TOKEN litex_i2s
#define DT_N_S_soc_S_i2s_tx_e000b000_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_I2S
#define DT_N_S_soc_S_i2s_tx_e000b000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_tx_e000b000, compatible, 0)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_tx_e000b000, compatible, 0)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_tx_e000b000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_tx_e000b000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_compatible_LEN 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names {"ev_status", "ev_pending", "ev_enable", "tx_ctl", "tx_stat", "tx_conf", "fifo"}
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_0 "ev_status"
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_0_STRING_UNQUOTED ev_status
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_0_STRING_TOKEN ev_status
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_0_STRING_UPPER_TOKEN EV_STATUS
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_1 "ev_pending"
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_1_STRING_UNQUOTED ev_pending
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_1_STRING_TOKEN ev_pending
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_1_STRING_UPPER_TOKEN EV_PENDING
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_2 "ev_enable"
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_2_STRING_UNQUOTED ev_enable
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_2_STRING_TOKEN ev_enable
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_2_STRING_UPPER_TOKEN EV_ENABLE
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_2_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_3 "tx_ctl"
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_3_STRING_UNQUOTED tx_ctl
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_3_STRING_TOKEN tx_ctl
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_3_STRING_UPPER_TOKEN TX_CTL
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_3_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_4 "tx_stat"
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_4_STRING_UNQUOTED tx_stat
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_4_STRING_TOKEN tx_stat
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_4_STRING_UPPER_TOKEN TX_STAT
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_4_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_5 "tx_conf"
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_5_STRING_UNQUOTED tx_conf
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_5_STRING_TOKEN tx_conf
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_5_STRING_UPPER_TOKEN TX_CONF
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_5_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_6 "fifo"
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_6_STRING_UNQUOTED fifo
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_6_STRING_TOKEN fifo
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_6_STRING_UPPER_TOKEN FIFO
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_IDX_6_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 0) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 1) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 2) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 3) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 4) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 5) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 6)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 6)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 6, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, reg_names, 6, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_LEN 7
#define DT_N_S_soc_S_i2s_tx_e000b000_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupts {7 /* 0x7 */, 2 /* 0x2 */}
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupts_IDX_0 7
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupts_IDX_1 2
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_i2s_tx_e000b000, interrupts, 0) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, interrupts, 1)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_i2s_tx_e000b000, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, interrupts, 1)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_i2s_tx_e000b000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_i2s_tx_e000b000, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_i2s_tx_e000b000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_wakeup_source 0
#define DT_N_S_soc_S_i2s_tx_e000b000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_i2s_tx_e000b000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_i2s_tx_e000b000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/prbs@e0006800
 *
 * Node identifier: DT_N_S_soc_S_prbs_e0006800
 *
 * Binding (compatible = litex,prbs):
 *   $ZEPHYR_BASE/dts/bindings/rng/litex,prbs.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_prbs_e0006800_PATH "/soc/prbs@e0006800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_prbs_e0006800_FULL_NAME "prbs@e0006800"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_prbs_e0006800_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_prbs_e0006800_CHILD_IDX 9

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_prbs_e0006800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_prbs_e0006800_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_prbs_e0006800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_prbs_e0006800_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_prbs_e0006800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_prbs_e0006800_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_prbs_e0006800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_prbs_e0006800_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_prbs_e0006800_ORD 18

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_prbs_e0006800_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_prbs_e0006800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_prbs_e0006800_EXISTS 1
#define DT_N_INST_0_litex_prbs DT_N_S_soc_S_prbs_e0006800
#define DT_N_NODELABEL_prbs0   DT_N_S_soc_S_prbs_e0006800

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_prbs_e0006800_REG_NUM 1
#define DT_N_S_soc_S_prbs_e0006800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_prbs_e0006800_REG_IDX_0_VAL_ADDRESS 3758123008 /* 0xe0006800 */
#define DT_N_S_soc_S_prbs_e0006800_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_prbs_e0006800_REG_NAME_status_VAL_ADDRESS DT_N_S_soc_S_prbs_e0006800_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_prbs_e0006800_REG_NAME_status_VAL_SIZE DT_N_S_soc_S_prbs_e0006800_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_prbs_e0006800_RANGES_NUM 0
#define DT_N_S_soc_S_prbs_e0006800_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_prbs_e0006800_IRQ_NUM 0
#define DT_N_S_soc_S_prbs_e0006800_COMPAT_MATCHES_litex_prbs 1
#define DT_N_S_soc_S_prbs_e0006800_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_prbs_e0006800_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_prbs_e0006800_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_prbs_e0006800_COMPAT_MODEL_IDX_0 "prbs"
#define DT_N_S_soc_S_prbs_e0006800_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_prbs_e0006800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_prbs_e0006800_P_reg {3758123008 /* 0xe0006800 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_prbs_e0006800_P_reg_IDX_0 3758123008
#define DT_N_S_soc_S_prbs_e0006800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_prbs_e0006800_P_reg_IDX_1 4
#define DT_N_S_soc_S_prbs_e0006800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_prbs_e0006800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_prbs_e0006800, reg, 0) \
	fn(DT_N_S_soc_S_prbs_e0006800, reg, 1)
#define DT_N_S_soc_S_prbs_e0006800_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_prbs_e0006800, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_prbs_e0006800, reg, 1)
#define DT_N_S_soc_S_prbs_e0006800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_prbs_e0006800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_prbs_e0006800, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_prbs_e0006800_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_prbs_e0006800, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_prbs_e0006800, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_prbs_e0006800_P_reg_EXISTS 1
#define DT_N_S_soc_S_prbs_e0006800_P_status "okay"
#define DT_N_S_soc_S_prbs_e0006800_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_prbs_e0006800_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_prbs_e0006800_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_prbs_e0006800_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_prbs_e0006800_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_prbs_e0006800_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_prbs_e0006800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_prbs_e0006800, status, 0) \
	fn(DT_N_S_soc_S_prbs_e0006800, status, 1) \
	fn(DT_N_S_soc_S_prbs_e0006800, status, 2) \
	fn(DT_N_S_soc_S_prbs_e0006800, status, 3)
#define DT_N_S_soc_S_prbs_e0006800_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_prbs_e0006800, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_prbs_e0006800, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_prbs_e0006800, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_prbs_e0006800, status, 3)
#define DT_N_S_soc_S_prbs_e0006800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_prbs_e0006800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_prbs_e0006800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_prbs_e0006800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_prbs_e0006800, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_prbs_e0006800_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_prbs_e0006800, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_prbs_e0006800, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_prbs_e0006800, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_prbs_e0006800, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_prbs_e0006800_P_status_EXISTS 1
#define DT_N_S_soc_S_prbs_e0006800_P_compatible {"litex,prbs"}
#define DT_N_S_soc_S_prbs_e0006800_P_compatible_IDX_0 "litex,prbs"
#define DT_N_S_soc_S_prbs_e0006800_P_compatible_IDX_0_STRING_UNQUOTED litex,prbs
#define DT_N_S_soc_S_prbs_e0006800_P_compatible_IDX_0_STRING_TOKEN litex_prbs
#define DT_N_S_soc_S_prbs_e0006800_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_PRBS
#define DT_N_S_soc_S_prbs_e0006800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_prbs_e0006800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_prbs_e0006800, compatible, 0)
#define DT_N_S_soc_S_prbs_e0006800_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_prbs_e0006800, compatible, 0)
#define DT_N_S_soc_S_prbs_e0006800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_prbs_e0006800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_prbs_e0006800_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_prbs_e0006800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_prbs_e0006800_P_compatible_LEN 1
#define DT_N_S_soc_S_prbs_e0006800_P_compatible_EXISTS 1
#define DT_N_S_soc_S_prbs_e0006800_P_reg_names {"status"}
#define DT_N_S_soc_S_prbs_e0006800_P_reg_names_IDX_0 "status"
#define DT_N_S_soc_S_prbs_e0006800_P_reg_names_IDX_0_STRING_UNQUOTED status
#define DT_N_S_soc_S_prbs_e0006800_P_reg_names_IDX_0_STRING_TOKEN status
#define DT_N_S_soc_S_prbs_e0006800_P_reg_names_IDX_0_STRING_UPPER_TOKEN STATUS
#define DT_N_S_soc_S_prbs_e0006800_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_prbs_e0006800_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_prbs_e0006800, reg_names, 0)
#define DT_N_S_soc_S_prbs_e0006800_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_prbs_e0006800, reg_names, 0)
#define DT_N_S_soc_S_prbs_e0006800_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_prbs_e0006800, reg_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_prbs_e0006800_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_prbs_e0006800, reg_names, 0, __VA_ARGS__)
#define DT_N_S_soc_S_prbs_e0006800_P_reg_names_LEN 1
#define DT_N_S_soc_S_prbs_e0006800_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_prbs_e0006800_P_wakeup_source 0
#define DT_N_S_soc_S_prbs_e0006800_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_prbs_e0006800_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_prbs_e0006800_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/pwm@e0007000
 *
 * Node identifier: DT_N_S_soc_S_pwm_e0007000
 *
 * Binding (compatible = litex,pwm):
 *   $ZEPHYR_BASE/dts/bindings/pwm/litex,pwm.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_pwm_e0007000_PATH "/soc/pwm@e0007000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_pwm_e0007000_FULL_NAME "pwm@e0007000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_pwm_e0007000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_pwm_e0007000_CHILD_IDX 10

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_pwm_e0007000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_pwm_e0007000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_pwm_e0007000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_pwm_e0007000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_pwm_e0007000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_pwm_e0007000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_pwm_e0007000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_pwm_e0007000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_pwm_e0007000_ORD 19

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_pwm_e0007000_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_pwm_e0007000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_pwm_e0007000_EXISTS 1
#define DT_N_INST_0_litex_pwm DT_N_S_soc_S_pwm_e0007000
#define DT_N_NODELABEL_pwm0   DT_N_S_soc_S_pwm_e0007000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_pwm_e0007000_REG_NUM 3
#define DT_N_S_soc_S_pwm_e0007000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_REG_IDX_0_VAL_ADDRESS 3758125056 /* 0xe0007000 */
#define DT_N_S_soc_S_pwm_e0007000_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_pwm_e0007000_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_REG_IDX_1_VAL_ADDRESS 3758125060 /* 0xe0007004 */
#define DT_N_S_soc_S_pwm_e0007000_REG_IDX_1_VAL_SIZE 16 /* 0x10 */
#define DT_N_S_soc_S_pwm_e0007000_REG_IDX_2_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_REG_IDX_2_VAL_ADDRESS 3758125076 /* 0xe0007014 */
#define DT_N_S_soc_S_pwm_e0007000_REG_IDX_2_VAL_SIZE 16 /* 0x10 */
#define DT_N_S_soc_S_pwm_e0007000_REG_NAME_enable_VAL_ADDRESS DT_N_S_soc_S_pwm_e0007000_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_pwm_e0007000_REG_NAME_enable_VAL_SIZE DT_N_S_soc_S_pwm_e0007000_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_pwm_e0007000_REG_NAME_width_VAL_ADDRESS DT_N_S_soc_S_pwm_e0007000_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_soc_S_pwm_e0007000_REG_NAME_width_VAL_SIZE DT_N_S_soc_S_pwm_e0007000_REG_IDX_1_VAL_SIZE
#define DT_N_S_soc_S_pwm_e0007000_REG_NAME_period_VAL_ADDRESS DT_N_S_soc_S_pwm_e0007000_REG_IDX_2_VAL_ADDRESS
#define DT_N_S_soc_S_pwm_e0007000_REG_NAME_period_VAL_SIZE DT_N_S_soc_S_pwm_e0007000_REG_IDX_2_VAL_SIZE
#define DT_N_S_soc_S_pwm_e0007000_RANGES_NUM 0
#define DT_N_S_soc_S_pwm_e0007000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_pwm_e0007000_IRQ_NUM 0
#define DT_N_S_soc_S_pwm_e0007000_COMPAT_MATCHES_litex_pwm 1
#define DT_N_S_soc_S_pwm_e0007000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_pwm_e0007000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_COMPAT_MODEL_IDX_0 "pwm"
#define DT_N_S_soc_S_pwm_e0007000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_pwm_e0007000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_pwm_e0007000_P_reg {3758125056 /* 0xe0007000 */, 4 /* 0x4 */, 3758125060 /* 0xe0007004 */, 16 /* 0x10 */, 3758125076 /* 0xe0007014 */, 16 /* 0x10 */}
#define DT_N_S_soc_S_pwm_e0007000_P_reg_IDX_0 3758125056
#define DT_N_S_soc_S_pwm_e0007000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_reg_IDX_1 4
#define DT_N_S_soc_S_pwm_e0007000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_reg_IDX_2 3758125060
#define DT_N_S_soc_S_pwm_e0007000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_reg_IDX_3 16
#define DT_N_S_soc_S_pwm_e0007000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_reg_IDX_4 3758125076
#define DT_N_S_soc_S_pwm_e0007000_P_reg_IDX_4_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_reg_IDX_5 16
#define DT_N_S_soc_S_pwm_e0007000_P_reg_IDX_5_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_e0007000, reg, 0) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 1) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 2) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 3) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 4) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 5)
#define DT_N_S_soc_S_pwm_e0007000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_e0007000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 5)
#define DT_N_S_soc_S_pwm_e0007000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_e0007000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 5, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_e0007000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_e0007000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg, 5, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_e0007000_P_reg_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_status "okay"
#define DT_N_S_soc_S_pwm_e0007000_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_pwm_e0007000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_pwm_e0007000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_pwm_e0007000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_pwm_e0007000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_pwm_e0007000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_pwm_e0007000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_e0007000, status, 0) \
	fn(DT_N_S_soc_S_pwm_e0007000, status, 1) \
	fn(DT_N_S_soc_S_pwm_e0007000, status, 2) \
	fn(DT_N_S_soc_S_pwm_e0007000, status, 3)
#define DT_N_S_soc_S_pwm_e0007000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_e0007000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, status, 3)
#define DT_N_S_soc_S_pwm_e0007000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_e0007000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_e0007000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_e0007000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_e0007000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_e0007000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_e0007000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_e0007000_P_status_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_compatible {"litex,pwm"}
#define DT_N_S_soc_S_pwm_e0007000_P_compatible_IDX_0 "litex,pwm"
#define DT_N_S_soc_S_pwm_e0007000_P_compatible_IDX_0_STRING_UNQUOTED litex,pwm
#define DT_N_S_soc_S_pwm_e0007000_P_compatible_IDX_0_STRING_TOKEN litex_pwm
#define DT_N_S_soc_S_pwm_e0007000_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_PWM
#define DT_N_S_soc_S_pwm_e0007000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_e0007000, compatible, 0)
#define DT_N_S_soc_S_pwm_e0007000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_e0007000, compatible, 0)
#define DT_N_S_soc_S_pwm_e0007000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_e0007000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_e0007000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_e0007000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_e0007000_P_compatible_LEN 1
#define DT_N_S_soc_S_pwm_e0007000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names {"enable", "width", "period"}
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_0 "enable"
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_0_STRING_UNQUOTED enable
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_0_STRING_TOKEN enable
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_0_STRING_UPPER_TOKEN ENABLE
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_1 "width"
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_1_STRING_UNQUOTED width
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_1_STRING_TOKEN width
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_1_STRING_UPPER_TOKEN WIDTH
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_2 "period"
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_2_STRING_UNQUOTED period
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_2_STRING_TOKEN period
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_2_STRING_UPPER_TOKEN PERIOD
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_IDX_2_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_pwm_e0007000, reg_names, 0) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg_names, 1) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg_names, 2)
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_pwm_e0007000, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg_names, 2)
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_pwm_e0007000, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_pwm_e0007000, reg_names, 2, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_pwm_e0007000, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_pwm_e0007000, reg_names, 2, __VA_ARGS__)
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_LEN 3
#define DT_N_S_soc_S_pwm_e0007000_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_wakeup_source 0
#define DT_N_S_soc_S_pwm_e0007000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_pwm_e0007000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_pwm_e0007000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/serial@e0001800
 *
 * Node identifier: DT_N_S_soc_S_serial_e0001800
 *
 * Binding (compatible = litex,uart0):
 *   $ZEPHYR_BASE/dts/bindings/serial/litex,uart0.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_serial_e0001800_PATH "/soc/serial@e0001800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_serial_e0001800_FULL_NAME "serial@e0001800"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_serial_e0001800_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_serial_e0001800_CHILD_IDX 1

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_serial_e0001800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_serial_e0001800_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_serial_e0001800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_serial_e0001800_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_serial_e0001800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_serial_e0001800_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_serial_e0001800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_serial_e0001800_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_serial_e0001800_ORD 20

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_serial_e0001800_REQUIRES_ORDS \
	5, /* /soc */ \
	11, /* /soc/interrupt-controller@bc0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_serial_e0001800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_serial_e0001800_EXISTS 1
#define DT_N_INST_0_litex_uart0 DT_N_S_soc_S_serial_e0001800
#define DT_N_NODELABEL_uart0    DT_N_S_soc_S_serial_e0001800

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_serial_e0001800_REG_NUM 8
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_0_VAL_ADDRESS 4026550272 /* 0xf0004800 */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_1_VAL_ADDRESS 4026550276 /* 0xf0004804 */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_1_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_2_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_2_VAL_ADDRESS 4026550280 /* 0xf0004808 */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_2_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_3_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_3_VAL_ADDRESS 4026550284 /* 0xf000480c */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_3_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_4_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_4_VAL_ADDRESS 4026550288 /* 0xf0004810 */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_4_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_5_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_5_VAL_ADDRESS 4026550292 /* 0xf0004814 */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_5_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_6_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_6_VAL_ADDRESS 4026550296 /* 0xf0004818 */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_6_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_7_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_7_VAL_ADDRESS 4026550300 /* 0xf000481c */
#define DT_N_S_soc_S_serial_e0001800_REG_IDX_7_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_rxtx_VAL_ADDRESS DT_N_S_soc_S_serial_e0001800_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_rxtx_VAL_SIZE DT_N_S_soc_S_serial_e0001800_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_txfull_VAL_ADDRESS DT_N_S_soc_S_serial_e0001800_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_txfull_VAL_SIZE DT_N_S_soc_S_serial_e0001800_REG_IDX_1_VAL_SIZE
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_rxempty_VAL_ADDRESS DT_N_S_soc_S_serial_e0001800_REG_IDX_2_VAL_ADDRESS
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_rxempty_VAL_SIZE DT_N_S_soc_S_serial_e0001800_REG_IDX_2_VAL_SIZE
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_ev_status_VAL_ADDRESS DT_N_S_soc_S_serial_e0001800_REG_IDX_3_VAL_ADDRESS
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_ev_status_VAL_SIZE DT_N_S_soc_S_serial_e0001800_REG_IDX_3_VAL_SIZE
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_ev_pending_VAL_ADDRESS DT_N_S_soc_S_serial_e0001800_REG_IDX_4_VAL_ADDRESS
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_ev_pending_VAL_SIZE DT_N_S_soc_S_serial_e0001800_REG_IDX_4_VAL_SIZE
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_ev_enable_VAL_ADDRESS DT_N_S_soc_S_serial_e0001800_REG_IDX_5_VAL_ADDRESS
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_ev_enable_VAL_SIZE DT_N_S_soc_S_serial_e0001800_REG_IDX_5_VAL_SIZE
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_txempty_VAL_ADDRESS DT_N_S_soc_S_serial_e0001800_REG_IDX_6_VAL_ADDRESS
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_txempty_VAL_SIZE DT_N_S_soc_S_serial_e0001800_REG_IDX_6_VAL_SIZE
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_rxfull_VAL_ADDRESS DT_N_S_soc_S_serial_e0001800_REG_IDX_7_VAL_ADDRESS
#define DT_N_S_soc_S_serial_e0001800_REG_NAME_rxfull_VAL_SIZE DT_N_S_soc_S_serial_e0001800_REG_IDX_7_VAL_SIZE
#define DT_N_S_soc_S_serial_e0001800_RANGES_NUM 0
#define DT_N_S_soc_S_serial_e0001800_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_serial_e0001800_IRQ_NUM 1
#define DT_N_S_soc_S_serial_e0001800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_IRQ_IDX_0_VAL_irq 0
#define DT_N_S_soc_S_serial_e0001800_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_serial_e0001800_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_COMPAT_MATCHES_litex_uart0 1
#define DT_N_S_soc_S_serial_e0001800_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_serial_e0001800_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_COMPAT_MODEL_IDX_0 "uart0"
#define DT_N_S_soc_S_serial_e0001800_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_serial_e0001800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_serial_e0001800_P_reg {4026550272 /* 0xf0004800 */, 4 /* 0x4 */, 4026550276 /* 0xf0004804 */, 4 /* 0x4 */, 4026550280 /* 0xf0004808 */, 4 /* 0x4 */, 4026550284 /* 0xf000480c */, 4 /* 0x4 */, 4026550288 /* 0xf0004810 */, 4 /* 0x4 */, 4026550292 /* 0xf0004814 */, 4 /* 0x4 */, 4026550296 /* 0xf0004818 */, 4 /* 0x4 */, 4026550300 /* 0xf000481c */, 4 /* 0x4 */}
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_0 4026550272
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_1 4
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_2 4026550276
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_3 4
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_4 4026550280
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_4_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_5 4
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_5_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_6 4026550284
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_6_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_7 4
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_7_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_8 4026550288
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_8_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_9 4
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_9_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_10 4026550292
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_10_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_11 4
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_11_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_12 4026550296
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_12_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_13 4
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_13_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_14 4026550300
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_14_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_15 4
#define DT_N_S_soc_S_serial_e0001800_P_reg_IDX_15_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_serial_e0001800, reg, 0) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 1) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 2) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 3) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 4) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 5) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 6) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 7) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 8) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 9) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 10) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 11) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 12) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 13) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 14) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 15)
#define DT_N_S_soc_S_serial_e0001800_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_serial_e0001800, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 9) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 10) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 11) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 12) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 13) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 14) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 15)
#define DT_N_S_soc_S_serial_e0001800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_serial_e0001800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 12, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 13, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 14, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 15, __VA_ARGS__)
#define DT_N_S_soc_S_serial_e0001800_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_serial_e0001800, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 9, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 11, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 12, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 13, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 14, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg, 15, __VA_ARGS__)
#define DT_N_S_soc_S_serial_e0001800_P_reg_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_interrupts {0 /* 0x0 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_serial_e0001800_P_interrupts_IDX_0 0
#define DT_N_S_soc_S_serial_e0001800_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_serial_e0001800_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_serial_e0001800, interrupts, 0) \
	fn(DT_N_S_soc_S_serial_e0001800, interrupts, 1)
#define DT_N_S_soc_S_serial_e0001800_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_serial_e0001800, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, interrupts, 1)
#define DT_N_S_soc_S_serial_e0001800_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_serial_e0001800, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_serial_e0001800_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_serial_e0001800, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_serial_e0001800_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_current_speed 115200
#define DT_N_S_soc_S_serial_e0001800_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_hw_flow_control 0
#define DT_N_S_soc_S_serial_e0001800_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_status "okay"
#define DT_N_S_soc_S_serial_e0001800_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_serial_e0001800_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_serial_e0001800_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_serial_e0001800_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_serial_e0001800_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_serial_e0001800_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_serial_e0001800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_serial_e0001800, status, 0) \
	fn(DT_N_S_soc_S_serial_e0001800, status, 1) \
	fn(DT_N_S_soc_S_serial_e0001800, status, 2) \
	fn(DT_N_S_soc_S_serial_e0001800, status, 3)
#define DT_N_S_soc_S_serial_e0001800_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_serial_e0001800, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, status, 3)
#define DT_N_S_soc_S_serial_e0001800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_serial_e0001800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_serial_e0001800_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_serial_e0001800, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_serial_e0001800_P_status_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_compatible {"litex,uart0"}
#define DT_N_S_soc_S_serial_e0001800_P_compatible_IDX_0 "litex,uart0"
#define DT_N_S_soc_S_serial_e0001800_P_compatible_IDX_0_STRING_UNQUOTED litex,uart0
#define DT_N_S_soc_S_serial_e0001800_P_compatible_IDX_0_STRING_TOKEN litex_uart0
#define DT_N_S_soc_S_serial_e0001800_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_UART0
#define DT_N_S_soc_S_serial_e0001800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_serial_e0001800, compatible, 0)
#define DT_N_S_soc_S_serial_e0001800_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_serial_e0001800, compatible, 0)
#define DT_N_S_soc_S_serial_e0001800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_serial_e0001800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_serial_e0001800_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_serial_e0001800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_serial_e0001800_P_compatible_LEN 1
#define DT_N_S_soc_S_serial_e0001800_P_compatible_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_names {"rxtx", "txfull", "rxempty", "ev_status", "ev_pending", "ev_enable", "txempty", "rxfull"}
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_0 "rxtx"
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_0_STRING_UNQUOTED rxtx
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_0_STRING_TOKEN rxtx
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_0_STRING_UPPER_TOKEN RXTX
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_1 "txfull"
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_1_STRING_UNQUOTED txfull
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_1_STRING_TOKEN txfull
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_1_STRING_UPPER_TOKEN TXFULL
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_2 "rxempty"
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_2_STRING_UNQUOTED rxempty
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_2_STRING_TOKEN rxempty
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_2_STRING_UPPER_TOKEN RXEMPTY
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_2_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_3 "ev_status"
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_3_STRING_UNQUOTED ev_status
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_3_STRING_TOKEN ev_status
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_3_STRING_UPPER_TOKEN EV_STATUS
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_3_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_4 "ev_pending"
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_4_STRING_UNQUOTED ev_pending
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_4_STRING_TOKEN ev_pending
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_4_STRING_UPPER_TOKEN EV_PENDING
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_4_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_5 "ev_enable"
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_5_STRING_UNQUOTED ev_enable
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_5_STRING_TOKEN ev_enable
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_5_STRING_UPPER_TOKEN EV_ENABLE
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_5_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_6 "txempty"
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_6_STRING_UNQUOTED txempty
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_6_STRING_TOKEN txempty
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_6_STRING_UPPER_TOKEN TXEMPTY
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_6_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_7 "rxfull"
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_7_STRING_UNQUOTED rxfull
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_7_STRING_TOKEN rxfull
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_7_STRING_UPPER_TOKEN RXFULL
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_IDX_7_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_serial_e0001800, reg_names, 0) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 1) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 2) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 3) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 4) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 5) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 6) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 7)
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_serial_e0001800, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 7)
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_serial_e0001800, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 7, __VA_ARGS__)
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_serial_e0001800, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_serial_e0001800, reg_names, 7, __VA_ARGS__)
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_LEN 8
#define DT_N_S_soc_S_serial_e0001800_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_serial_e0001800_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_serial_e0001800_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_serial_e0001800_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_serial_e0001800_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_wakeup_source 0
#define DT_N_S_soc_S_serial_e0001800_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_serial_e0001800_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_serial_e0001800_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/spi@e0002000
 *
 * Node identifier: DT_N_S_soc_S_spi_e0002000
 *
 * Binding (compatible = litex,spi):
 *   $ZEPHYR_BASE/dts/bindings/spi/litex,spi.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_spi_e0002000_PATH "/soc/spi@e0002000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_spi_e0002000_FULL_NAME "spi@e0002000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_spi_e0002000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_spi_e0002000_CHILD_IDX 2

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_spi_e0002000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_spi_e0002000_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_e0002000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_e0002000_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_spi_e0002000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_spi_e0002000_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_spi_e0002000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_spi_e0002000_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_spi_e0002000_ORD 21

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_spi_e0002000_REQUIRES_ORDS \
	5, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_spi_e0002000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_spi_e0002000_EXISTS 1
#define DT_N_INST_0_litex_spi DT_N_S_soc_S_spi_e0002000
#define DT_N_NODELABEL_spi0   DT_N_S_soc_S_spi_e0002000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_spi_e0002000_REG_NUM 6
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_0_VAL_ADDRESS 3758104576 /* 0xe0002000 */
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_1_VAL_ADDRESS 3758104580 /* 0xe0002004 */
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_1_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_2_VAL_ADDRESS 3758104584 /* 0xe0002008 */
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_2_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_3_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_3_VAL_ADDRESS 3758104588 /* 0xe000200c */
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_3_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_4_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_4_VAL_ADDRESS 3758104592 /* 0xe0002010 */
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_4_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_5_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_5_VAL_ADDRESS 3758104596 /* 0xe0002014 */
#define DT_N_S_soc_S_spi_e0002000_REG_IDX_5_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_spi_e0002000_REG_NAME_control_VAL_ADDRESS DT_N_S_soc_S_spi_e0002000_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_spi_e0002000_REG_NAME_control_VAL_SIZE DT_N_S_soc_S_spi_e0002000_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_spi_e0002000_REG_NAME_status_VAL_ADDRESS DT_N_S_soc_S_spi_e0002000_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_soc_S_spi_e0002000_REG_NAME_status_VAL_SIZE DT_N_S_soc_S_spi_e0002000_REG_IDX_1_VAL_SIZE
#define DT_N_S_soc_S_spi_e0002000_REG_NAME_mosi_VAL_ADDRESS DT_N_S_soc_S_spi_e0002000_REG_IDX_2_VAL_ADDRESS
#define DT_N_S_soc_S_spi_e0002000_REG_NAME_mosi_VAL_SIZE DT_N_S_soc_S_spi_e0002000_REG_IDX_2_VAL_SIZE
#define DT_N_S_soc_S_spi_e0002000_REG_NAME_miso_VAL_ADDRESS DT_N_S_soc_S_spi_e0002000_REG_IDX_3_VAL_ADDRESS
#define DT_N_S_soc_S_spi_e0002000_REG_NAME_miso_VAL_SIZE DT_N_S_soc_S_spi_e0002000_REG_IDX_3_VAL_SIZE
#define DT_N_S_soc_S_spi_e0002000_REG_NAME_cs_VAL_ADDRESS DT_N_S_soc_S_spi_e0002000_REG_IDX_4_VAL_ADDRESS
#define DT_N_S_soc_S_spi_e0002000_REG_NAME_cs_VAL_SIZE DT_N_S_soc_S_spi_e0002000_REG_IDX_4_VAL_SIZE
#define DT_N_S_soc_S_spi_e0002000_REG_NAME_loopback_VAL_ADDRESS DT_N_S_soc_S_spi_e0002000_REG_IDX_5_VAL_ADDRESS
#define DT_N_S_soc_S_spi_e0002000_REG_NAME_loopback_VAL_SIZE DT_N_S_soc_S_spi_e0002000_REG_IDX_5_VAL_SIZE
#define DT_N_S_soc_S_spi_e0002000_RANGES_NUM 0
#define DT_N_S_soc_S_spi_e0002000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_spi_e0002000_IRQ_NUM 0
#define DT_N_S_soc_S_spi_e0002000_COMPAT_MATCHES_litex_spi 1
#define DT_N_S_soc_S_spi_e0002000_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_spi_e0002000_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_COMPAT_MODEL_IDX_0 "spi"
#define DT_N_S_soc_S_spi_e0002000_STATUS_disabled 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_spi_e0002000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_spi_e0002000_P_reg {3758104576 /* 0xe0002000 */, 4 /* 0x4 */, 3758104580 /* 0xe0002004 */, 4 /* 0x4 */, 3758104584 /* 0xe0002008 */, 4 /* 0x4 */, 3758104588 /* 0xe000200c */, 4 /* 0x4 */, 3758104592 /* 0xe0002010 */, 4 /* 0x4 */, 3758104596 /* 0xe0002014 */, 4 /* 0x4 */}
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_0 3758104576
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_1 4
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_2 3758104580
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_3 4
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_4 3758104584
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_4_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_5 4
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_5_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_6 3758104588
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_6_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_7 4
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_7_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_8 3758104592
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_8_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_9 4
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_9_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_10 3758104596
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_10_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_11 4
#define DT_N_S_soc_S_spi_e0002000_P_reg_IDX_11_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_e0002000, reg, 0) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 1) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 2) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 3) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 4) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 5) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 6) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 7) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 8) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 9) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 10) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 11)
#define DT_N_S_soc_S_spi_e0002000_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_e0002000, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 9) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 10) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 11)
#define DT_N_S_soc_S_spi_e0002000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_e0002000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 11, __VA_ARGS__)
#define DT_N_S_soc_S_spi_e0002000_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_e0002000, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 9, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg, 11, __VA_ARGS__)
#define DT_N_S_soc_S_spi_e0002000_P_reg_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_status "disabled"
#define DT_N_S_soc_S_spi_e0002000_P_status_STRING_UNQUOTED disabled
#define DT_N_S_soc_S_spi_e0002000_P_status_STRING_TOKEN disabled
#define DT_N_S_soc_S_spi_e0002000_P_status_STRING_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_e0002000_P_status_ENUM_IDX 2
#define DT_N_S_soc_S_spi_e0002000_P_status_ENUM_TOKEN disabled
#define DT_N_S_soc_S_spi_e0002000_P_status_ENUM_UPPER_TOKEN DISABLED
#define DT_N_S_soc_S_spi_e0002000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_e0002000, status, 0) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 1) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 2) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 3) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 4) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 5) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 6) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 7)
#define DT_N_S_soc_S_spi_e0002000_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_e0002000, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 7)
#define DT_N_S_soc_S_spi_e0002000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_e0002000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_spi_e0002000_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_e0002000, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, status, 7, __VA_ARGS__)
#define DT_N_S_soc_S_spi_e0002000_P_status_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_compatible {"litex,spi"}
#define DT_N_S_soc_S_spi_e0002000_P_compatible_IDX_0 "litex,spi"
#define DT_N_S_soc_S_spi_e0002000_P_compatible_IDX_0_STRING_UNQUOTED litex,spi
#define DT_N_S_soc_S_spi_e0002000_P_compatible_IDX_0_STRING_TOKEN litex_spi
#define DT_N_S_soc_S_spi_e0002000_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_SPI
#define DT_N_S_soc_S_spi_e0002000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_e0002000, compatible, 0)
#define DT_N_S_soc_S_spi_e0002000_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_e0002000, compatible, 0)
#define DT_N_S_soc_S_spi_e0002000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_e0002000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_e0002000_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_e0002000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_spi_e0002000_P_compatible_LEN 1
#define DT_N_S_soc_S_spi_e0002000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_names {"control", "status", "mosi", "miso", "cs", "loopback"}
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_0 "control"
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_0_STRING_UNQUOTED control
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_0_STRING_TOKEN control
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_0_STRING_UPPER_TOKEN CONTROL
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_1 "status"
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_1_STRING_UNQUOTED status
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_1_STRING_TOKEN status
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_1_STRING_UPPER_TOKEN STATUS
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_2 "mosi"
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_2_STRING_UNQUOTED mosi
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_2_STRING_TOKEN mosi
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_2_STRING_UPPER_TOKEN MOSI
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_2_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_3 "miso"
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_3_STRING_UNQUOTED miso
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_3_STRING_TOKEN miso
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_3_STRING_UPPER_TOKEN MISO
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_3_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_4 "cs"
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_4_STRING_UNQUOTED cs
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_4_STRING_TOKEN cs
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_4_STRING_UPPER_TOKEN CS
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_4_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_5 "loopback"
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_5_STRING_UNQUOTED loopback
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_5_STRING_TOKEN loopback
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_5_STRING_UPPER_TOKEN LOOPBACK
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_IDX_5_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_spi_e0002000, reg_names, 0) \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 1) \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 2) \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 3) \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 4) \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 5)
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_spi_e0002000, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 5)
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_spi_e0002000, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 5, __VA_ARGS__)
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_spi_e0002000, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_spi_e0002000, reg_names, 5, __VA_ARGS__)
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_LEN 6
#define DT_N_S_soc_S_spi_e0002000_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_wakeup_source 0
#define DT_N_S_soc_S_spi_e0002000_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_spi_e0002000_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_spi_e0002000_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Devicetree node: /soc/timer@e0002800
 *
 * Node identifier: DT_N_S_soc_S_timer_e0002800
 *
 * Binding (compatible = litex,timer0):
 *   $ZEPHYR_BASE/dts/bindings/timer/litex,timer0.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_timer_e0002800_PATH "/soc/timer@e0002800"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_timer_e0002800_FULL_NAME "timer@e0002800"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_timer_e0002800_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_timer_e0002800_CHILD_IDX 3

/* Helper macros for child nodes of this node. */
#define DT_N_S_soc_S_timer_e0002800_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_timer_e0002800_FOREACH_CHILD_SEP(fn, sep) 
#define DT_N_S_soc_S_timer_e0002800_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_timer_e0002800_FOREACH_CHILD_SEP_VARGS(fn, sep, ...) 
#define DT_N_S_soc_S_timer_e0002800_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_timer_e0002800_FOREACH_CHILD_STATUS_OKAY_SEP(fn, sep) 
#define DT_N_S_soc_S_timer_e0002800_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 
#define DT_N_S_soc_S_timer_e0002800_FOREACH_CHILD_STATUS_OKAY_SEP_VARGS(fn, sep, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_timer_e0002800_ORD 22

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_timer_e0002800_REQUIRES_ORDS \
	5, /* /soc */ \
	11, /* /soc/interrupt-controller@bc0 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_timer_e0002800_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_timer_e0002800_EXISTS 1
#define DT_N_INST_0_litex_timer0 DT_N_S_soc_S_timer_e0002800
#define DT_N_NODELABEL_timer0    DT_N_S_soc_S_timer_e0002800

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_timer_e0002800_REG_NUM 10
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_0_VAL_ADDRESS 4026548224 /* 0xf0004000 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_0_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_1_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_1_VAL_ADDRESS 4026548228 /* 0xf0004004 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_1_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_2_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_2_VAL_ADDRESS 4026548232 /* 0xf0004008 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_2_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_3_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_3_VAL_ADDRESS 4026548236 /* 0xf000400c */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_3_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_4_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_4_VAL_ADDRESS 4026548240 /* 0xf0004010 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_4_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_5_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_5_VAL_ADDRESS 4026548244 /* 0xf0004014 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_5_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_6_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_6_VAL_ADDRESS 4026548248 /* 0xf0004018 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_6_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_7_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_7_VAL_ADDRESS 4026548252 /* 0xf000401c */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_7_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_8_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_8_VAL_ADDRESS 4026548256 /* 0xf0004020 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_8_VAL_SIZE 4 /* 0x4 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_9_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_9_VAL_ADDRESS 4026548260 /* 0xf0004024 */
#define DT_N_S_soc_S_timer_e0002800_REG_IDX_9_VAL_SIZE 8 /* 0x8 */
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_load_VAL_ADDRESS DT_N_S_soc_S_timer_e0002800_REG_IDX_0_VAL_ADDRESS
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_load_VAL_SIZE DT_N_S_soc_S_timer_e0002800_REG_IDX_0_VAL_SIZE
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_reload_VAL_ADDRESS DT_N_S_soc_S_timer_e0002800_REG_IDX_1_VAL_ADDRESS
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_reload_VAL_SIZE DT_N_S_soc_S_timer_e0002800_REG_IDX_1_VAL_SIZE
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_en_VAL_ADDRESS DT_N_S_soc_S_timer_e0002800_REG_IDX_2_VAL_ADDRESS
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_en_VAL_SIZE DT_N_S_soc_S_timer_e0002800_REG_IDX_2_VAL_SIZE
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_update_value_VAL_ADDRESS DT_N_S_soc_S_timer_e0002800_REG_IDX_3_VAL_ADDRESS
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_update_value_VAL_SIZE DT_N_S_soc_S_timer_e0002800_REG_IDX_3_VAL_SIZE
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_value_VAL_ADDRESS DT_N_S_soc_S_timer_e0002800_REG_IDX_4_VAL_ADDRESS
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_value_VAL_SIZE DT_N_S_soc_S_timer_e0002800_REG_IDX_4_VAL_SIZE
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_ev_status_VAL_ADDRESS DT_N_S_soc_S_timer_e0002800_REG_IDX_5_VAL_ADDRESS
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_ev_status_VAL_SIZE DT_N_S_soc_S_timer_e0002800_REG_IDX_5_VAL_SIZE
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_ev_pending_VAL_ADDRESS DT_N_S_soc_S_timer_e0002800_REG_IDX_6_VAL_ADDRESS
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_ev_pending_VAL_SIZE DT_N_S_soc_S_timer_e0002800_REG_IDX_6_VAL_SIZE
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_ev_enable_VAL_ADDRESS DT_N_S_soc_S_timer_e0002800_REG_IDX_7_VAL_ADDRESS
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_ev_enable_VAL_SIZE DT_N_S_soc_S_timer_e0002800_REG_IDX_7_VAL_SIZE
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_uptime_latch_VAL_ADDRESS DT_N_S_soc_S_timer_e0002800_REG_IDX_8_VAL_ADDRESS
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_uptime_latch_VAL_SIZE DT_N_S_soc_S_timer_e0002800_REG_IDX_8_VAL_SIZE
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_uptime_cycles_VAL_ADDRESS DT_N_S_soc_S_timer_e0002800_REG_IDX_9_VAL_ADDRESS
#define DT_N_S_soc_S_timer_e0002800_REG_NAME_uptime_cycles_VAL_SIZE DT_N_S_soc_S_timer_e0002800_REG_IDX_9_VAL_SIZE
#define DT_N_S_soc_S_timer_e0002800_RANGES_NUM 0
#define DT_N_S_soc_S_timer_e0002800_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_timer_e0002800_IRQ_NUM 1
#define DT_N_S_soc_S_timer_e0002800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_IRQ_IDX_0_VAL_irq 1
#define DT_N_S_soc_S_timer_e0002800_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_timer_e0002800_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_COMPAT_MATCHES_litex_timer0 1
#define DT_N_S_soc_S_timer_e0002800_COMPAT_VENDOR_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_COMPAT_VENDOR_IDX_0 "LiteX SoC builder"
#define DT_N_S_soc_S_timer_e0002800_COMPAT_MODEL_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_COMPAT_MODEL_IDX_0 "timer0"
#define DT_N_S_soc_S_timer_e0002800_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_timer_e0002800_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_timer_e0002800_P_reg {4026548224 /* 0xf0004000 */, 4 /* 0x4 */, 4026548228 /* 0xf0004004 */, 4 /* 0x4 */, 4026548232 /* 0xf0004008 */, 4 /* 0x4 */, 4026548236 /* 0xf000400c */, 4 /* 0x4 */, 4026548240 /* 0xf0004010 */, 4 /* 0x4 */, 4026548244 /* 0xf0004014 */, 4 /* 0x4 */, 4026548248 /* 0xf0004018 */, 4 /* 0x4 */, 4026548252 /* 0xf000401c */, 4 /* 0x4 */, 4026548256 /* 0xf0004020 */, 4 /* 0x4 */, 4026548260 /* 0xf0004024 */, 8 /* 0x8 */}
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_0 4026548224
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_1 4
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_2 4026548228
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_2_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_3 4
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_3_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_4 4026548232
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_4_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_5 4
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_5_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_6 4026548236
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_6_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_7 4
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_7_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_8 4026548240
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_8_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_9 4
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_9_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_10 4026548244
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_10_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_11 4
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_11_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_12 4026548248
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_12_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_13 4
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_13_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_14 4026548252
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_14_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_15 4
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_15_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_16 4026548256
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_16_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_17 4
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_17_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_18 4026548260
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_18_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_19 8
#define DT_N_S_soc_S_timer_e0002800_P_reg_IDX_19_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e0002800, reg, 0) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 1) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 2) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 3) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 4) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 5) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 6) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 7) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 8) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 9) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 10) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 11) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 12) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 13) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 14) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 15) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 16) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 17) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 18) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 19)
#define DT_N_S_soc_S_timer_e0002800_P_reg_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_timer_e0002800, reg, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 9) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 10) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 11) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 12) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 13) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 14) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 15) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 16) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 17) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 18) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 19)
#define DT_N_S_soc_S_timer_e0002800_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e0002800, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 9, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 10, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 11, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 12, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 13, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 14, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 15, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 16, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 17, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 18, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 19, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e0002800_P_reg_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_timer_e0002800, reg, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 9, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 10, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 11, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 12, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 13, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 14, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 15, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 16, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 17, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 18, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg, 19, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e0002800_P_reg_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_interrupts {1 /* 0x1 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_timer_e0002800_P_interrupts_IDX_0 1
#define DT_N_S_soc_S_timer_e0002800_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_timer_e0002800_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e0002800, interrupts, 0) \
	fn(DT_N_S_soc_S_timer_e0002800, interrupts, 1)
#define DT_N_S_soc_S_timer_e0002800_P_interrupts_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_timer_e0002800, interrupts, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, interrupts, 1)
#define DT_N_S_soc_S_timer_e0002800_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e0002800, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e0002800_P_interrupts_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_timer_e0002800, interrupts, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e0002800_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_status "okay"
#define DT_N_S_soc_S_timer_e0002800_P_status_STRING_UNQUOTED okay
#define DT_N_S_soc_S_timer_e0002800_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_timer_e0002800_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_timer_e0002800_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_timer_e0002800_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_timer_e0002800_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_timer_e0002800_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e0002800, status, 0) \
	fn(DT_N_S_soc_S_timer_e0002800, status, 1) \
	fn(DT_N_S_soc_S_timer_e0002800, status, 2) \
	fn(DT_N_S_soc_S_timer_e0002800, status, 3)
#define DT_N_S_soc_S_timer_e0002800_P_status_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_timer_e0002800, status, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, status, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, status, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, status, 3)
#define DT_N_S_soc_S_timer_e0002800_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e0002800, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e0002800_P_status_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_timer_e0002800, status, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, status, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, status, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e0002800_P_status_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_compatible {"litex,timer0"}
#define DT_N_S_soc_S_timer_e0002800_P_compatible_IDX_0 "litex,timer0"
#define DT_N_S_soc_S_timer_e0002800_P_compatible_IDX_0_STRING_UNQUOTED litex,timer0
#define DT_N_S_soc_S_timer_e0002800_P_compatible_IDX_0_STRING_TOKEN litex_timer0
#define DT_N_S_soc_S_timer_e0002800_P_compatible_IDX_0_STRING_UPPER_TOKEN LITEX_TIMER0
#define DT_N_S_soc_S_timer_e0002800_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e0002800, compatible, 0)
#define DT_N_S_soc_S_timer_e0002800_P_compatible_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_timer_e0002800, compatible, 0)
#define DT_N_S_soc_S_timer_e0002800_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e0002800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e0002800_P_compatible_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_timer_e0002800, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e0002800_P_compatible_LEN 1
#define DT_N_S_soc_S_timer_e0002800_P_compatible_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_names {"load", "reload", "en", "update_value", "value", "ev_status", "ev_pending", "ev_enable", "uptime_latch", "uptime_cycles"}
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_0 "load"
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_0_STRING_UNQUOTED load
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_0_STRING_TOKEN load
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_0_STRING_UPPER_TOKEN LOAD
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_1 "reload"
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_1_STRING_UNQUOTED reload
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_1_STRING_TOKEN reload
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_1_STRING_UPPER_TOKEN RELOAD
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_1_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_2 "en"
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_2_STRING_UNQUOTED en
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_2_STRING_TOKEN en
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_2_STRING_UPPER_TOKEN EN
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_2_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_3 "update_value"
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_3_STRING_UNQUOTED update_value
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_3_STRING_TOKEN update_value
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_3_STRING_UPPER_TOKEN UPDATE_VALUE
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_3_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_4 "value"
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_4_STRING_UNQUOTED value
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_4_STRING_TOKEN value
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_4_STRING_UPPER_TOKEN VALUE
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_4_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_5 "ev_status"
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_5_STRING_UNQUOTED ev_status
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_5_STRING_TOKEN ev_status
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_5_STRING_UPPER_TOKEN EV_STATUS
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_5_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_6 "ev_pending"
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_6_STRING_UNQUOTED ev_pending
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_6_STRING_TOKEN ev_pending
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_6_STRING_UPPER_TOKEN EV_PENDING
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_6_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_7 "ev_enable"
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_7_STRING_UNQUOTED ev_enable
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_7_STRING_TOKEN ev_enable
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_7_STRING_UPPER_TOKEN EV_ENABLE
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_7_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_8 "uptime_latch"
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_8_STRING_UNQUOTED uptime_latch
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_8_STRING_TOKEN uptime_latch
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_8_STRING_UPPER_TOKEN UPTIME_LATCH
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_8_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_9 "uptime_cycles"
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_9_STRING_UNQUOTED uptime_cycles
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_9_STRING_TOKEN uptime_cycles
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_9_STRING_UPPER_TOKEN UPTIME_CYCLES
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_IDX_9_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e0002800, reg_names, 0) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 1) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 2) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 3) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 4) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 5) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 6) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 7) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 8) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 9)
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_FOREACH_PROP_ELEM_SEP(fn, sep) fn(DT_N_S_soc_S_timer_e0002800, reg_names, 0) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 1) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 2) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 3) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 4) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 5) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 6) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 7) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 8) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 9)
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e0002800, reg_names, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 9, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_FOREACH_PROP_ELEM_SEP_VARGS(fn, sep, ...) fn(DT_N_S_soc_S_timer_e0002800, reg_names, 0, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 1, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 2, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 3, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 4, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 5, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 6, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 7, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 8, __VA_ARGS__) DT_DEBRACKET_INTERNAL sep \
	fn(DT_N_S_soc_S_timer_e0002800, reg_names, 9, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_LEN 10
#define DT_N_S_soc_S_timer_e0002800_P_reg_names_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_interrupt_parent DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_timer_e0002800_P_interrupt_parent_IDX_0 DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_timer_e0002800_P_interrupt_parent_IDX_0_PH DT_N_S_soc_S_interrupt_controller_bc0
#define DT_N_S_soc_S_timer_e0002800_P_interrupt_parent_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_interrupt_parent_LEN 1
#define DT_N_S_soc_S_timer_e0002800_P_interrupt_parent_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_wakeup_source 0
#define DT_N_S_soc_S_timer_e0002800_P_wakeup_source_EXISTS 1
#define DT_N_S_soc_S_timer_e0002800_P_zephyr_pm_device_runtime_auto 0
#define DT_N_S_soc_S_timer_e0002800_P_zephyr_pm_device_runtime_auto_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_entropy           DT_N_S_soc_S_prbs_e0006800
#define DT_CHOSEN_zephyr_entropy_EXISTS    1
#define DT_CHOSEN_zephyr_console           DT_N_S_soc_S_serial_e0001800
#define DT_CHOSEN_zephyr_console_EXISTS    1
#define DT_CHOSEN_zephyr_shell_uart        DT_N_S_soc_S_serial_e0001800
#define DT_CHOSEN_zephyr_shell_uart_EXISTS 1
#define DT_CHOSEN_zephyr_sram              DT_N_S_memory_40000000
#define DT_CHOSEN_zephyr_sram_EXISTS       1

/* Macros for iterating over all nodes and enabled nodes */
#define DT_FOREACH_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_soc) fn(DT_N_S_soc_S_interrupt_controller_bc0) fn(DT_N_S_soc_S_serial_e0001800) fn(DT_N_S_soc_S_spi_e0002000) fn(DT_N_S_soc_S_timer_e0002800) fn(DT_N_S_soc_S_ethernet_e0009800) fn(DT_N_S_soc_S_dna_e0003800) fn(DT_N_S_soc_S_i2c_e0005000) fn(DT_N_S_soc_S_gpio_e0005800) fn(DT_N_S_soc_S_gpio_e0006000) fn(DT_N_S_soc_S_prbs_e0006800) fn(DT_N_S_soc_S_pwm_e0007000) fn(DT_N_S_soc_S_i2s_rx_e000a800) fn(DT_N_S_soc_S_i2s_tx_e000b000) fn(DT_N_S_soc_S_clock_outputs) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1) fn(DT_N_S_soc_S_clock_e0004800) fn(DT_N_S_memory_40000000)
#define DT_FOREACH_OKAY_HELPER(fn) fn(DT_N) fn(DT_N_S_chosen) fn(DT_N_S_cpus) fn(DT_N_S_cpus_S_cpu_0) fn(DT_N_S_soc) fn(DT_N_S_soc_S_interrupt_controller_bc0) fn(DT_N_S_soc_S_serial_e0001800) fn(DT_N_S_soc_S_timer_e0002800) fn(DT_N_S_soc_S_ethernet_e0009800) fn(DT_N_S_soc_S_i2c_e0005000) fn(DT_N_S_soc_S_gpio_e0005800) fn(DT_N_S_soc_S_gpio_e0006000) fn(DT_N_S_soc_S_prbs_e0006800) fn(DT_N_S_soc_S_pwm_e0007000) fn(DT_N_S_soc_S_clock_outputs) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1) fn(DT_N_S_memory_40000000)

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_litex_vexriscv 1
#define DT_COMPAT_HAS_OKAY_riscv 1
#define DT_COMPAT_HAS_OKAY_vexriscv_intc0 1
#define DT_COMPAT_HAS_OKAY_litex_uart0 1
#define DT_COMPAT_HAS_OKAY_litex_timer0 1
#define DT_COMPAT_HAS_OKAY_litex_eth0 1
#define DT_COMPAT_HAS_OKAY_litex_i2c 1
#define DT_COMPAT_HAS_OKAY_litex_gpio 1
#define DT_COMPAT_HAS_OKAY_litex_prbs 1
#define DT_COMPAT_HAS_OKAY_litex_pwm 1
#define DT_COMPAT_HAS_OKAY_litex_clkout 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_litex_vexriscv_NUM_OKAY 2
#define DT_N_INST_riscv_NUM_OKAY 1
#define DT_N_INST_vexriscv_intc0_NUM_OKAY 1
#define DT_N_INST_litex_uart0_NUM_OKAY 1
#define DT_N_INST_litex_timer0_NUM_OKAY 1
#define DT_N_INST_litex_eth0_NUM_OKAY 1
#define DT_N_INST_litex_i2c_NUM_OKAY 1
#define DT_N_INST_litex_gpio_NUM_OKAY 2
#define DT_N_INST_litex_prbs_NUM_OKAY 1
#define DT_N_INST_litex_pwm_NUM_OKAY 1
#define DT_N_INST_litex_clkout_NUM_OKAY 2
#define DT_FOREACH_OKAY_litex_vexriscv(fn) fn(DT_N) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_litex_vexriscv(fn, ...) fn(DT_N, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_litex_vexriscv(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_litex_vexriscv(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_riscv(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_riscv(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_riscv(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_riscv(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_vexriscv_intc0(fn) fn(DT_N_S_soc_S_interrupt_controller_bc0)
#define DT_FOREACH_OKAY_VARGS_vexriscv_intc0(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_bc0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_vexriscv_intc0(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_vexriscv_intc0(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_litex_uart0(fn) fn(DT_N_S_soc_S_serial_e0001800)
#define DT_FOREACH_OKAY_VARGS_litex_uart0(fn, ...) fn(DT_N_S_soc_S_serial_e0001800, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_litex_uart0(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_litex_uart0(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_litex_timer0(fn) fn(DT_N_S_soc_S_timer_e0002800)
#define DT_FOREACH_OKAY_VARGS_litex_timer0(fn, ...) fn(DT_N_S_soc_S_timer_e0002800, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_litex_timer0(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_litex_timer0(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_litex_eth0(fn) fn(DT_N_S_soc_S_ethernet_e0009800)
#define DT_FOREACH_OKAY_VARGS_litex_eth0(fn, ...) fn(DT_N_S_soc_S_ethernet_e0009800, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_litex_eth0(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_litex_eth0(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_litex_i2c(fn) fn(DT_N_S_soc_S_i2c_e0005000)
#define DT_FOREACH_OKAY_VARGS_litex_i2c(fn, ...) fn(DT_N_S_soc_S_i2c_e0005000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_litex_i2c(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_litex_i2c(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_litex_gpio(fn) fn(DT_N_S_soc_S_gpio_e0005800) fn(DT_N_S_soc_S_gpio_e0006000)
#define DT_FOREACH_OKAY_VARGS_litex_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_e0005800, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_e0006000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_litex_gpio(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_litex_gpio(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)
#define DT_FOREACH_OKAY_litex_prbs(fn) fn(DT_N_S_soc_S_prbs_e0006800)
#define DT_FOREACH_OKAY_VARGS_litex_prbs(fn, ...) fn(DT_N_S_soc_S_prbs_e0006800, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_litex_prbs(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_litex_prbs(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_litex_pwm(fn) fn(DT_N_S_soc_S_pwm_e0007000)
#define DT_FOREACH_OKAY_VARGS_litex_pwm(fn, ...) fn(DT_N_S_soc_S_pwm_e0007000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_litex_pwm(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_litex_pwm(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_litex_clkout(fn) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1)
#define DT_FOREACH_OKAY_VARGS_litex_clkout(fn, ...) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_0, __VA_ARGS__) fn(DT_N_S_soc_S_clock_outputs_S_clock_controller_1, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_litex_clkout(fn) fn(0) fn(1)
#define DT_FOREACH_OKAY_INST_VARGS_litex_clkout(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
